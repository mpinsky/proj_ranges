quartz(width=6,height=3)par(mfrow=c(1,3), las=2)plot(t, mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Quantity')lines(t,hq, col=cols[3], type='o', pch=16)lines(t,nq, col=cols[5], type='o', pch=16)plot(t, mp, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Price')lines(t,hp, col=cols[3], type='o', pch=16)lines(t,np, col=cols[5], type='o', pch=16)plot(t, mp*mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Value')lines(t,hp*hq, col=cols[3], type='o', pch=16)lines(t,np*nq, col=cols[5], type='o', pch=16)
?par
par(mfrow=c(1,3), las=1, mai=c(0.5)plot(t, mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Quantity')lines(t,hq, col=cols[3], type='o', pch=16)lines(t,nq, col=cols[5], type='o', pch=16)plot(t, mp, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Price')lines(t,hp, col=cols[3], type='o', pch=16)lines(t,np, col=cols[5], type='o', pch=16)plot(t, mp*mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Value')lines(t,hp*hq, col=cols[3], type='o', pch=16)lines(t,np*nq, col=cols[5], type='o', pch=16)
quartz(width=6,height=3)par(mfrow=c(1,3), las=1, mai=c(0.5)plot(t, mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Quantity')lines(t,hq, col=cols[3], type='o', pch=16)lines(t,nq, col=cols[5], type='o', pch=16)plot(t, mp, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Price')lines(t,hp, col=cols[3], type='o', pch=16)lines(t,np, col=cols[5], type='o', pch=16)plot(t, mp*mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Value')lines(t,hp*hq, col=cols[3], type='o', pch=16)lines(t,np*nq, col=cols[5], type='o', pch=16)
quartz(width=6,height=3)par(mfrow=c(1,3), las=1, mai=c(0.5, 0.5, 0.2, 0.1))plot(t, mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Quantity')lines(t,hq, col=cols[3], type='o', pch=16)lines(t,nq, col=cols[5], type='o', pch=16)plot(t, mp, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Price')lines(t,hp, col=cols[3], type='o', pch=16)lines(t,np, col=cols[5], type='o', pch=16)plot(t, mp*mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Value')lines(t,hp*hq, col=cols[3], type='o', pch=16)lines(t,np*nq, col=cols[5], type='o', pch=16)
x=rpois(1000, 10)
hist(x)
hist(x, breaks=c(0,30,by=1))
hist(x, breaks=seq(0,30,by=1))
hist(x, breaks=seq(-0.5,30,by=1))
hist(rpois(10000,10), breaks=seq(-0.5,30,by=1), col='grey')
hist(rpois(10000,5), breaks=seq(-0.5,30,by=1), col='grey')
hist(rpois(10000,3), breaks=seq(-0.5,30,by=1), col='grey')
hist(rpois(10000,4), breaks=seq(-0.5,30,by=1), col='grey')
hist(rpois(10000,5), breaks=seq(-0.5,30,by=1), col='grey')
x = rpois(100, 0.25)/100
hist(x, col='grey')
?rpois
x= rgeom(100,0.25)/100
hist(x, col='grey')
x[1:10]
x = rbinom(1000, 100, 0.25)
x[1:10]
x = rbinom(1000, 100, 0.25)/100
x[1:10]
hist(x, col='grey')
abline(v=0.33)
sum(x>=0.33)/length(x)
x = rbinom(1000, 50, 0.25)/100
hist(x, col='grey')
abline(v=0.33)
x = rbinom(10000, 50, 0.25)/50
hist(x, col='grey')
abline(v=0.33)
sum(x>=0.33)/length(x)
x = rbinom(1000000, 100, 0.25)/100
hist(x, col='grey')
sum(x>=0.33)/length(x)
x = rbinom(1000000, 50, 0.25)/50
sum(x>=0.33)/length(x)
Correlations among variables?
la = 1:100
fa = 4.7559*la^2.6399
plot(la, fa)
biomassave = dara.frame(region = rep(myregions, c(80,80)), year = rep(2020:2099, 2)) # total abundance (2020-2099) for
runtype <- 'testseason'############################## Choose species to project ##############################load(paste('output/modeldiag_', runtype, '.Rdata', sep='')) # model diagnosticsprojspp <- modeldiag$sppocean[modeldiag$auc.tt >= 0.75 & !is.na(modeldiag$auc.tt)] # from Elith et al., but there may be better criteria to uselength(projspp) # number of species to project to# find the files with these species for our chosen model fitfiles <- list.files(modfolder)files <- files[grepl(paste('_', runtype, '_', sep=''), files) & grepl(paste(gsub('/|\\(|\\)', '', projspp), collapse='|'), gsub('/|\\(|\\)', '', files))] # have to strip out parentheses and slashes from file and taxon names so that grep doesn't interpret themlength(files) # should match length of projspp
options(warn=1) # print warnings as they occur
load('~/Documents/Rutgers/NorthAmerican_survey_data/NEFSC/2015-01-30/Survdat.RData')
ls()
head(survdat)
## Set working directoriesif(Sys.info()["nodename"] == "pinsky-macbookair"){	setwd('~/Documents/Rutgers/Range projections/proj_ranges/')	projfolder = '../CEmodels_proj' # holds model projections (outside Git)	modfolder = '../CEModels' # holds the models (outside Git)	}if(Sys.info()["nodename"] == "amphiprion.deenr.rutgers.edu"){	setwd('~/Documents/range_projections/')	projfolder = 'CEmodels_proj'	modfolder = 'CEmodels'	}# could add code for Lauren's working directory here
require(Hmisc)wmean <- function(x){	i <- !is.na(x[,1]) & !is.na(x[,2])	if(sum(i) == 0) return(NA)	else return(weighted.mean(x[i,1], x[i,2])) # weighted mean function for summarize()}## load the dataruntype <- 'test'load(paste('data/meanlat,lon,biomass_', runtype, '.RData', sep='')) # biomasssum, meanlat, meanlon: projected biomass by year for each taxon in each region
sppregions <- sort(unique(paste(meanlat$region, meanlat$sppocean)))	length(sppregions)	# quartz(width=10, height=8)	pdf(file=paste('figures/meanlat_proj_', runtype, '.pdf', sep=''), width=10, height=8)	par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)
rc = 1 # row counter	cc = 0 # column counter	options(warn=1) # print warnings as they occur	for(i in 1:length(sppregions)){		if(i %% 100 == 0) print(i)		inds <- paste(meanlat$region, meanlat$sppocean) == sppregions[i]		thisreg <- unique(meanlat$region[inds])		thisspp <- unique(meanlat$sppocean[inds])		# increment row and column counters as needed		cc = cc+1		if(cc == 7){ cc = 1; rc = rc + 1}		if(rc == 7){ cc = 1; rc = 1}#
		if(i>1){ if(thisreg != oldreg){  # switch to a new page when I get to a new region				par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)				rc = 1; cc = 1		}}#
		# ylims		ylims <- range(meanlat[inds, grep('lat', names(meanlat))], na.rm=TRUE) # set ylims for this species in this region#		ylims <- range(meanlat[meanlat$region == thisreg, grep('lat', names(meanlat))])	# set ylims for the whole region		if(is.infinite(ylims[1])) ylims = c(0,1)#
		# plot data for each GCM		plot(meanlat$year[inds], meanlat$lat_1[inds], col='grey', las=1, type='l', ylim=ylims, main=thisspp)		for(j in 2:13) lines(meanlat$year[inds], meanlat[[paste('lat', j, sep='_')]][inds], col='grey')#
		# plot ensemble mean		agg <- cbind(meanlat$year[inds], rowMeans(meanlat[inds, grep('lat', names(meanlat))]))		lines(agg[,1], agg[,2], col='black')#
		if(cc==1) mtext(text='Mean latitude (Â°N)', side=2, line=2.3, cex=0.6) # add y label on left of each row		if(rc==1) mtext(text=thisreg, side=3, line=1.3, cex=0.6) # add region header on top of page		oldreg = thisreg # save the previous region to see if we need a new page on the next round	}	dev.off()
length(xtimes)/12
1140/12
2006+95
donefiles <- list.files(projfolder, pattern=runtype) # models I made earlier today
# Fit climate-envelope models#
## Still very much in progress#
#
##################
### Load data ###	#
##################
load('data/trawl_allregionsforprojections_2015-02-02.RData') # load dat data.frame. Has all trawl observations from all regions. wtcpue has the standardized biomass estimates. They are standardized within regions, but not across regions.#
#
source("CSquareCode.r") #taken from VMStools in googlecode#
#
#############################################
# Standardize species names across regions ##
#############################################
# see spptaxonomy_2015-02-09_plusManual.csv for a useful conversion table#
Spptax<-read.csv("data/spptaxonomy_plusManual.csv") #note: new column in CSV file #
spptax<-apply(Spptax,2,tolower)#
dat$sppl<-tolower(dat$spp)#
datspp<-unique(dat$sppl)#
#
spptax<-as.data.frame(spptax)#
sum(datspp %in% spptax$taxon)# 798 of 4937 spp matched
matches<-datspp %in% spptax$taxon + datspp %in% spptax$name + datspp %in% spptax$common + datspp %in% spptax$genusspecies  #826 matches/4937
grep('metridium', spptax$taxon, value=TRUE)
newnames=character(length(datspp))for (i in 1:length(datspp)){	if(matches[i]==0){		newnames[i]<-datspp[i]	} else if(datspp[i] %in% spptax$taxon){		ind<-match(datspp[i],spptax$taxon)		newnames[i]<-as.character(spptax$newname[ind])	} else if(datspp[i] %in% spptax$name){		ind<-match(datspp[i],spptax$name)		newnames[i]<-as.character(spptax$newname[ind])	} else if(datspp[i] %in% spptax$genusspecies){		ind<-match(datspp[i],spptax$genusspecies)		newnames[i]<-as.character(spptax$newname[ind])	} else if(datspp[i] %in% spptax$common){ # is this needed? (Malin 5/4/2015)		ind<-match(datspp[i],spptax$common)		newnames[i]<-as.character(spptax$newname[ind])	}}length(unique(datspp))length(unique(newnames)) # down to 4833 unique spp, from 4937
grep('/(', newnames)
grep('//(', newnames)
grep('\\(', newnames)
grep('\\(', newnames, values=TRUE)
grep('\\(', newnames, value=TRUE)
source("CSquareCode.r") #taken from VMStools in googlecode############################################# Standardize species names across regions ############################################## see spptaxonomy_2015-02-09_plusManual.csv for a useful conversion tableSpptax<-read.csv("data/spptaxonomy_plusManual.csv") #note: new column in CSV file spptax<-apply(Spptax,2,tolower)dat$sppl<-tolower(dat$spp)datspp<-unique(dat$sppl)spptax<-as.data.frame(spptax)sum(datspp %in% spptax$taxon)# 798 of 4937 spp matched#Match when possible and assign new genus species, otherwise keep old name#Find taxa with matches in the taxonomy table#In some cases, the "name" field of taxonomy has spelling errors (missing "n"s). In this case, genus+species should be used. But in some cases, "genus species" are not given if full taxonomy is missing. The spptaxonomy.csv file now has a "newname" column which merges these optimally.matches<-datspp %in% spptax$taxon + datspp %in% spptax$name + datspp %in% spptax$common + datspp %in% spptax$genusspecies  #826 matches/4937#For those species datspp[matches>0], replace current name with spptax$newnamenewnames=character(length(datspp))for (i in 1:length(datspp)){	if(matches[i]==0){		newnames[i]<-datspp[i]	} else if(datspp[i] %in% spptax$taxon){		ind<-match(datspp[i],spptax$taxon)		newnames[i]<-as.character(spptax$newname[ind])	} else if(datspp[i] %in% spptax$name){		ind<-match(datspp[i],spptax$name)		newnames[i]<-as.character(spptax$newname[ind])	} else if(datspp[i] %in% spptax$genusspecies){		ind<-match(datspp[i],spptax$genusspecies)		newnames[i]<-as.character(spptax$newname[ind])	} else if(datspp[i] %in% spptax$common){ # is this needed? (Malin 5/4/2015)		ind<-match(datspp[i],spptax$common)		newnames[i]<-as.character(spptax$newname[ind])	}}length(unique(datspp))length(unique(newnames)) # down to 4832 unique spp, from 4937
oldnewnames<-cbind(sppl=datspp,sppnew=newnames)#Now merge new names with old names in dat filedat<-merge(dat,oldnewnames) #dat now contains "sppnew"
# Have a biomass that never goes to zero (useful for fitting log-links with a stratum effect) #dat$wtcpuena = dat$wtcpue#dat$wtcpuena[dat$wtcpuena == 0] = 1e-4#dat$wtcpuenal = log(dat$wtcpuena)# other useful columnsdat$presfit = dat$wtcpue > 0 # indicator for where present#dat$stratumfact = as.factor(dat$stratum)#dat$yrfact = as.factor(dat$year)#dat$regionfact<-as.factor(dat$region)#dat$sppregion = paste(dat$sppnew, dat$region, sep='_')dat$ocean[dat$region %in% c("AFSC_Aleutians", "AFSC_EBS", "AFSC_GOA", "AFSC_WCTri", "NWFSC_WCAnn")] <- "Pac"dat$ocean[dat$region %in% c("DFO_NewfoundlandFall", "DFO_NewfoundlandSpring", "DFO_ScotianShelf","DFO_SoGulf","NEFSC_NEUSFall", "NEFSC_NEUSSpring","SEFSC_GOMex")] <- "Atl"#dat$ocean[dat$region == "SEFSC_GOMex"] <- "Gulf" #Or should Gulf of Mex group with Altantic?dat$sppocean = paste(dat$sppnew, dat$ocean, sep='_') # add rugosityrugfile<-read.csv("data/trawl_latlons_rugosity_forMalin_2015_02_10.csv")dat<-merge(dat,rugfile) #lose 69 instances of lumpenus lampretaeformis b/c missing lat/lonrm(rugfile)dat$logrugosity<-log(dat$rugosity+0.01) #log-transformed rugosity gave better model fits in initial tests of rugosity covariatedat$cs1<-as.factor(CSquare(dat$lon,dat$lat,1)) #classify into 1 degree squares#dat$cs6m<-as.factor(CSquare(dat$lon,dat$lat,0.1)) #classify into 6 arcminute squares
myregions<-unique(dat$region)myspp<-NULLfor(r in myregions){#	surveyyrs<-names(table(dat$year[dat$region==r]))	regdat<-dat[dat$region==r & dat$wtcpue > 0 & !is.na(dat$wtcpue),] # trim to focal region and rows with catch > 0	yrocc<-table(regdat$year,regdat$sppocean) #table of number of occurrances each year	sumyrs<-apply(yrocc,2,function(x) sum(x>0)) #identify years with more than zero catch of each taxon	sumobs<-colSums(yrocc)	min1<-colnames(yrocc)[sumyrs>=10 & sumobs >= 300]  #identify taxa with at least 8 years of catch and at least 40 total catch records	myspp<-c(myspp,min1) #now with myspp plus ocean}#table(myspp) #shows which species are selected in multiple surveysmyspp<-unique(myspp) length(myspp) # 665 unique taxa_ocean (up from 621 if we require presence in all years of a survey)#remove  any taxa missing species name, egg cases, anemones, familiesdrop<-myspp[grep("spp",myspp)] #158 with "spp." (missing species name)#drop<-c(drop,myspp[grep("egg",myspp)]) #7 with "egg"#drop<-c(drop,myspp[grep("anemone",myspp)]) #2 anemones# drop<-c(drop,myspp["teuthida","liparidinae","bathylagus sp.","lampanyctus sp.","caridea", "carinariidae","antipatharia","annelida" ,"crustacea shrimp") # also missing species namedroplist<-c("sp.", "egg","anemone","unident", "unknown", "teuthida","liparidinae","bathylagus sp.","lampanyctus sp.","caridea", "carinariidae","antipatharia","annelida" ,"crustacea shrimp", "artediellus _Atl", "asteroidea s.c._Atl", "bivalvia c._Atl", "cephalopoda c._Atl", "decapoda o._Atl", "gastropoda o._Atl", "mytilidae f._Atl", "ophiuroidea s.c._Atl", "paguridae f._Atl", "paguroidea s.f._Atl", "penaeus _Atl", "polychaeta c._Atl", "porifera p._Atl", "pycnogonida s.p._Atl", "scyphozoa c._Atl", "sepiolodae f._Atl", "anthozoa c._Atl", "beryciformes (order)_Atl", "cirripedia s.c._Atl", "clypeasteroida o._Atl", "etropus _Atl", "euphausiacea o._Atl", "fistularia _Atl", "halichondria cf. sitiens_Pac", "holothuroidea c._Atl", "macrouriformes (order)_Atl", "melanostomiidae (stomiatidae)_Atl", "octopoda o._Atl", "pandalidae f._Atl", "paralepididae _Atl", "seapen (order)_Atl", "symphurus _Atl", "tunicata s.p._Atl", "urophycis _Atl", "melanostomiidae (stomiatidae)_Atl", "gorgonocephalidae,asteronychidae f._Atl", "trash species in catch_Atl")for (i in 1:length(droplist)) {drop<-c(drop,myspp[grep(droplist[i],myspp, fixed=TRUE)])}#
# remove any taxa that lack a space (e.g., only one word, like a Family or Order name)drop2 <- myspp[!grepl(' ', myspp)] # 92 more taxa to removemyspp<-myspp[!(myspp %in% drop | myspp %in% drop2)]myspp<-sort(myspp) length(myspp) #down to 553 spp. to model (but up from 512 if we require presence in all years). A few species are present in multiple ocean basins and thus will have multiple models.# At one point, I only used spp with at least 300 valid rows of data (present or not) and at least 40 rows of data where present# spp=sort(unique(dat$spp));spp # sppreg = sort(unique(dat$sppregion))# note: some species are found in both the Atlantic and the Pacific. We probably want to treat these separately? (as separate "species")# then need to trim dat to just these species# However, we'll need to go back to the full dat file to determine where zero hauls occur, unless we assume each haul had at least one of these species. Check this here:#dat2<-dat[dat$sppocean %in% myspp,]#length(unique(dat$haulid))  #114810#length(unique(dat2$haulid)) #114640 (only 170 "zero" hauls not accounted for in dat2. meh.)dat<-dat[dat$sppocean %in% myspp,] #remove unnecessary columns:dat<-dat[,!colnames(dat) %in% c("spp","sppl")] #could probably remove otherssave(dat,file="data/dat_selectedspp.Rdata")
length(unique(dat$haulid))  #114810
length(unique(dat2$haulid)) #114640 (only 170 "zero" hauls not accounted for in dat2. meh.)
dat2<-dat[dat$sppocean %in% myspp,]
length(unique(dat2$haulid)) #114640 (only 170 "zero" hauls not accounted for in dat2. meh.)
length(unique(dat2$haulid)) #114640 (only 170 "zero" hauls not accounted for in dat2. meh.)
## Set working directoriesif(Sys.info()["nodename"] == "pinsky-macbookair"){	setwd('~/Documents/Rutgers/Range projections/proj_ranges/')	projfolder = '../CEmodels_proj' # holds model projections (outside Git)	modfolder = '../CEModels' # holds the models (outside Git)	}if(Sys.info()["nodename"] == "amphiprion.deenr.rutgers.edu"){	setwd('~/Documents/range_projections/')	projfolder = 'CEmodels_proj'	modfolder = 'CEmodels'	}# could add code for Lauren's working directory here
require(mgcv)require(Hmisc)## choose which run to useruntype <- 'test'# load all projections from this run
files <- list.files(path = projfolder, pattern=paste('summproj_', runtype, '_', sep=''))
files
runtype <- 'test'timestarts <- c(2006, 2021, 2041, 2061, 2081)timeends <- c(2020, 2040, 2060, 2080, 2100)
i=1
# load data for this species	load(paste(projfolder, '/', files[i], sep='')) # load summproj for this taxon	myregions <- sort(unique(summproj$region))	mysppocean <- gsub('.Rdata', '', gsub(paste('summproj_', runtype, '_', sep=''), '', files[i]))
myregins
myregions
mysppocean
print(paste(i, 'of', length(files), mysppocean, myregions, Sys.time()))
print(paste(i, 'of', length(files), mysppocean, paste(myregions, collapse=', '), Sys.time()))
ls()
head(summproj)
files <- files[!grepl(paste(gsub('/|\\(|\\)', '', donespp), collapse='|'), files)] # remove any models that we made earlierlength(files)
## Set working directoriesif(Sys.info()["nodename"] == "pinsky-macbookair"){	setwd('~/Documents/Rutgers/Range projections/proj_ranges/')	projfolder = '../CEmodels_proj' # holds model projections (outside Git)	modfolder = '../CEModels' # holds the models (outside Git)	}if(Sys.info()["nodename"] == "amphiprion.deenr.rutgers.edu"){	setwd('~/Documents/range_projections/')	projfolder = 'CEmodels_proj'	modfolder = 'CEmodels'	}# could add code for Lauren's working directory here
require(mgcv)require(Hmisc)# weighted mean function to use with summarize()wmean <- function(x){ # values in col 1, weights in col 2	inds <- !is.na(x[,1]) & !is.na(x[,2])	return(weighted.mean(x[inds,1], x[inds,2])) }#
## choose which run and time periods to useruntype <- 'test'timeperiods <- data.frame(year = 2006:2100, period = c(rep('2006-2020', 15), rep('2021-2040', 20), rep('2021-2040', 20), rep('2021-2040', 20), rep('2081-2040', 20))
)
timeperiods
timeperiods <- data.frame(year = 2006:2100, period = c(rep('2006-2020', 15), rep('2021-2040', 20), rep('2041-2060', 20), rep('2061-2080', 20), rep('2081-2100', 20)))
timeperiods
files <- list.files(path = projfolder, pattern=paste('summproj_', runtype, '_', sep=''))
files
i=1
load(paste(projfolder, '/', files[i], sep='')) # load summproj for this taxon	myregions <- sort(unique(summproj$region))	mysppocean <- gsub('.Rdata', '', gsub(paste('summproj_', runtype, '_', sep=''), '', files[i]))
myregions
mysppocean
print(paste(i, 'of', length(files), mysppocean, paste(myregions, collapse=', '), Sys.time()))
ls()
head(summproj)
dim(summproj)
summary(summproj)
inds <- !duplicated(summproj[,c('region', 'lat', 'lon', 'season')])
sum(inds)
mybiomassavemap = data.frame(sppocean = rep(mysppocean, sum(inds)), region = summproj$region[inds], season = summproj$season[inds], lat = summproj$lat[inds], lon = summproj$lon[inds], wtcpue.proj = NA)
dim(mybiomassavemap)
length(unique(timeperiods$period))
nt <- length(unique(timeperiods$period))
mybiomassavemap = data.frame(sppocean = rep(mysppocean, sum(inds)*nt), region = rep(summproj$region[inds], nt), period = rep(sort(unique(timeperiods$period)), rep(sum(inds), nt)), season = rep(summproj$season[inds], nt), lat = rep(summproj$lat[inds], nt), lon = rep(summproj$lon[inds], nt), wtcpue.proj = NA)
dim(mybiomassavemap)
1897*5
j=1
periods <- sort(unique(timeperiods$period))nt <- length(unique(periods))
nt
inds <- summproj$year %in% timeperiods$year[timeperiods$period == periods[j]]
sum(inds)
cols <- grep('wtcpue.proj', names(summproj))
cols
sort(unique(deltaSSTperiods$period))
temp <- apply(summproj[,cols], MARGIN=1, FUN=mean)
head(temp)
summary(temp)
inds <- summproj$year %in% timeperiods$year[timeperiods$period == periods[j]]		inds2 <- mymap$period == periods[j]
mymap <- data.frame(sppocean = rep(mysppocean, sum(inds)*nt), region = rep(summproj$region[inds], nt), period = rep(sort(unique(timeperiods$period)), rep(sum(inds), nt)), season = rep(summproj$season[inds], nt), lat = rep(summproj$lat[inds], nt), lon = rep(summproj$lon[inds], nt), wtcpue.proj = NA)
inds2 <- mymap$period == periods[j]
all(summproj$period[inds] == mymap$period[inds2] & summproj$region[inds] == mymap$region[inds2] & summproj$season[inds] == mymap$season[inds2] & summproj$lat[inds] == mymap$lat[inds2] & summproj$lon[inds] == mymap$lon[inds2])
all(summproj$period[inds] == mymap$period[inds2])
head(mymap$period[inds2])
head(summproj$period[inds])
all(summproj$region[inds] == mymap$region[inds2] & summproj$season[inds] == mymap$season[inds2] & summproj$lat[inds] == mymap$lat[inds2] & summproj$lon[inds] == mymap$lon[inds2])
mymap$wtcpue.proj[inds2] <- apply(summproj[inds,cols], MARGIN=1, FUN=mean)
sum(inds)
sum(inds2)
cols <- grep('wtcpue.proj', names(summproj))	for(j in 1:nt){		inds <- summproj$year %in% timeperiods$year[timeperiods$period == periods[j]]		inds2 <- mymap$period == periods[j]		if(all(summproj$region[inds] == mymap$region[inds2] & summproj$season[inds] == mymap$season[inds2] & summproj$lat[inds] == mymap$lat[inds2] & summproj$lon[inds] == mymap$lon[inds2])){			mymap$wtcpue.proj[inds2] <- apply(summproj[inds,cols], MARGIN=1, FUN=mean) 		} else {			warning(paste('rows do not align for j=', j))		}	}
head(mymap)
unique(mymap$region)
unique(mymap$period)
mymap <- mymap[order(mymap$region, mymap$period, mymap$season, mymap$lat, mymap$lon),]	summproj <- summproj[order(summproj$region, summproj$period, summproj$season, summproj$lat, summproj$lon),]
summproj <- summproj[order(summproj$region, summproj$year, summproj$season, summproj$lat, summproj$lon),]
dim(summproj)
cols <- grep('wtcpue.proj', names(summproj))
inds <- summproj$year %in% timeperiods$year[timeperiods$period == periods[j]]		inds2 <- mymap$period == periods[j]
sum(inds)
sum(inds2)
temp <- apply(summproj[inds,cols], MARGIN=1, FUN=mean)
length(temp)
intersect(names(summproj, names(timeperiods)))
intersect(names(summproj), names(timeperiods)))
intersect(names(summproj), names(timeperiods))
summproj <- merge(summproj, timeperiods)
head(summproj)
inds <- summproj$period == periods[j]
j
j=1
inds <- summproj$period == periods[j]		inds2 <- mymap$period == periods[j]
temp2 <- aggregate(list(wtcpue.proj = temp), by=list(region = summproj$region, period = summproj$period, season = summproj$season, lat = summproj$lat, lon = summproj$lon), FUN=mean, na.rm=TRUE)
temp <- apply(summproj[inds,cols], MARGIN=1, FUN=mean) # average across models		temp2 <- aggregate(list(wtcpue.proj = temp), by=list(region = summproj$region, period = summproj$period, season = summproj$season, lat = summproj$lat, lon = summproj$lon), FUN=mean, na.rm=TRUE)
temp2 <- aggregate(list(wtcpue.proj = temp), by=list(region = summproj$region[inds], period = summproj$period[inds], season = summproj$season[inds], lat = summproj$lat[inds], lon = summproj$lon[inds]), FUN=mean, na.rm=TRUE)
dim(temp2)
all(temp2$region == mymap$region & temp2$period == mymap$period & temp2$season == mymap$season & temp2$lat == mymap$lat & temp2$lon == mymap$long)
head(temp2)
mymap$wtcpue.proj[inds2] <- temp2$wtcpue.proj
i
# load data for this species	load(paste(projfolder, '/', files[i], sep='')) # load summproj for this taxon	myregions <- sort(unique(summproj$region))	mysppocean <- gsub('.Rdata', '', gsub(paste('summproj_', runtype, '_', sep=''), '', files[i]))	print(paste(i, 'of', length(files), mysppocean, paste(myregions, collapse=', '), Sys.time()))	summproj <- merge(summproj, timeperiods)	# set up dataframe for this taxon	inds <- !duplicated(summproj[,c('region', 'lat', 'lon', 'season')]) # unique locations/seasons to record	mymap <- data.frame(sppocean = rep(mysppocean, sum(inds)*nt), region = rep(summproj$region[inds], nt), period = rep(sort(unique(timeperiods$period)), rep(sum(inds), nt)), season = rep(summproj$season[inds], nt), lat = rep(summproj$lat[inds], nt), lon = rep(summproj$lon[inds], nt), wtcpue.proj = NA)	mymap <- mymap[order(mymap$region, mymap$period, mymap$season, mymap$lat, mymap$lon),]	summproj <- summproj[order(summproj$region, summproj$year, summproj$season, summproj$lat, summproj$lon),]	# Summarize projections across all models within time periods	cols <- grep('wtcpue.proj', names(summproj))	for(j in 1:nt){		inds <- summproj$period == periods[j]		inds2 <- mymap$period == periods[j]		temp <- apply(summproj[inds,cols], MARGIN=1, FUN=mean) # average across models		temp2 <- aggregate(list(wtcpue.proj = temp), by=list(region = summproj$region[inds], period = summproj$period[inds], season = summproj$season[inds], lat = summproj$lat[inds], lon = summproj$lon[inds]), FUN=mean, na.rm=TRUE)		temp2 <- temp2[order(temp2$region, temp2$period, temp2$season, temp2$lat, temp2$lon),]		if(all(temp2$region == mymap$region & temp2$period == mymap$period & temp2$season == mymap$season & temp2$lat == mymap$lat & temp2$lon == mymap$long)){			mymap$wtcpue.proj[inds2] <- temp2$wtcpue.proj		} else {			warning(paste('rows do not match on j=', j))				}	}
biomassavemap <- data.frame(sppocean = character(0), region = character(0), period = character(0), season = numeric(0), lat = numeric(0), lon = numeric(0), wtcpue.proj = numeric(0))
require(mgcv)require(Hmisc)# weighted mean function to use with summarize()wmean <- function(x){ # values in col 1, weights in col 2	inds <- !is.na(x[,1]) & !is.na(x[,2])	return(weighted.mean(x[inds,1], x[inds,2])) }#
## choose which run and time periods to useruntype <- 'test'timeperiods <- data.frame(year = 2006:2100, period = c(rep('2006-2020', 15), rep('2021-2040', 20), rep('2041-2060', 20), rep('2061-2080', 20), rep('2081-2100', 20)))periods <- sort(unique(timeperiods$period))nt <- length(unique(periods))# list all projections from this runfiles <- list.files(path = projfolder, pattern=paste('summproj_', runtype, '_', sep=''))#
# set up dataframes# Don't know how many regions for each taxon, so can't pre-allocate the rows (but could guess high... might speed this up)# could also calc mean depth, but would need to pull from rugosity filebiomassavemap <- data.frame(sppocean = character(0), region = character(0), period = character(0), season = numeric(0), lat = numeric(0), lon = numeric(0), wtcpue.proj = numeric(0))options(warn=1) # print warnings as they occur# loop through all filesfor(i in 1:length(files)){ # takes a while (a couple hours ?)	# load data for this species	load(paste(projfolder, '/', files[i], sep='')) # load summproj for this taxon	myregions <- sort(unique(summproj$region))	mysppocean <- gsub('.Rdata', '', gsub(paste('summproj_', runtype, '_', sep=''), '', files[i]))	print(paste(i, 'of', length(files), mysppocean, paste(myregions, collapse=', '), Sys.time()))	summproj <- merge(summproj, timeperiods)	# set up dataframe for this taxon	inds <- !duplicated(summproj[,c('region', 'lat', 'lon', 'season')]) # unique locations/seasons to record	mymap <- data.frame(sppocean = rep(mysppocean, sum(inds)*nt), region = rep(summproj$region[inds], nt), period = rep(sort(unique(timeperiods$period)), rep(sum(inds), nt)), season = rep(summproj$season[inds], nt), lat = rep(summproj$lat[inds], nt), lon = rep(summproj$lon[inds], nt), wtcpue.proj = NA)	mymap <- mymap[order(mymap$region, mymap$period, mymap$season, mymap$lat, mymap$lon),]	summproj <- summproj[order(summproj$region, summproj$year, summproj$season, summproj$lat, summproj$lon),]	# Summarize projections across all models within time periods	cols <- grep('wtcpue.proj', names(summproj))	for(j in 1:nt){		inds <- summproj$period == periods[j]		inds2 <- mymap$period == periods[j]		temp <- apply(summproj[inds,cols], MARGIN=1, FUN=mean) # average across models		temp2 <- aggregate(list(wtcpue.proj = temp), by=list(region = summproj$region[inds], period = summproj$period[inds], season = summproj$season[inds], lat = summproj$lat[inds], lon = summproj$lon[inds]), FUN=mean, na.rm=TRUE)		temp2 <- temp2[order(temp2$region, temp2$period, temp2$season, temp2$lat, temp2$lon),]		if(all(temp2$region == mymap$region & temp2$period == mymap$period & temp2$season == mymap$season & temp2$lat == mymap$lat & temp2$lon == mymap$long)){			mymap$wtcpue.proj[inds2] <- temp2$wtcpue.proj		} else {			warning(paste('rows do not match on j=', j))				}	}	biomassavemap <- rbind(biomassavemap, mymap) # an inefficient way to do this: better to pre-allocate}
head(biomassavemap)
summary(biomassavemap)
table(biomassavemap$sppocean)
dim(biomassavemap)
save(biomassavemap, file = paste('data/biomassavemap_', runtype, '.RData', sep=''))
require(lattice)require(gridExtra)runtype <- 'test' # which run type to usefreeaxes <- 'freeaxes_' # set this to '' to use common z-scale for all plots on a page. set to 'freeaxes_' to allow z-scale to vary for each plot#
load(paste('data/biomassavemap_', runtype, '.RData', sep=''))#
m1 = c('2020-2060', '', '', '', '', '', '', '', '', '', '', '', '') # graph titles for left columnm2 = c('2060-2100', '', '', '', '', '', '', '', '', '', '', '', '') # right column
spps <- sort(unique(biomassavemap$sppocean))
length(spps)
sppregs <- biomassavemap[!duplicated(biomassavemap[,c('sppocean', 'region')]), c('sppocean', 'region')]
dim(sppregs)
sppregs
i=1
inds <- biomassavemap$sppocean == sppregs$sppocean[i] & biomassavemap$region == sppregs$region[i]
sum(inds)
summary(biomassavemap[inds,])
sppregseas <- biomassavemap[!duplicated(biomassavemap[,c('sppocean', 'region', 'season')]), c('sppocean', 'region', 'season')] # each spp/region combination to make maps for
nrow(sppregseas)
i
inds <- biomassavemap$sppocean == sppregseas$sppocean[i] & biomassavemap$region == sppregseas$region[i]
sum(inds)
summary(biomassavemap[inds,])
rng = range(biomassavemap$wtcpue.proj[inds]), na.rm=TRUE)
rng = range(biomassavemap$wtcpue.proj[inds], na.rm=TRUE)
rng
cols = colorRampPalette(c('blue', 'purple', 'red1'), interpolate='linear')
periods <- sort(unique(biomassavemap$period))
periods
inds <- biomassavemap$sppocean == sppregseas$sppocean[i] & biomassavemap$region == sppregseas$region[i]	rng <- range(biomassavemap$wtcpue.proj[inds], na.rm=TRUE)	plots <- vector('list', length(periods)) # time periods
maintitle <- paste(sppregseas$sppocean[i], sppregseas$region[i], sppregseas$season[i], '\n', periods[j])
maintitle
maintitle <- paste(sppregseas$sppocean[i], sppregseas$region[i], '\n', sppregseas$season[i], periods[j])
maintitle
options(warn=1) # print warnings as they occurcols <- colorRampPalette(c('blue', 'purple', 'red1'), interpolate='linear')periods <- sort(unique(biomassavemap$period))
i
j
j=1
inds <- biomassavemap$sppocean == sppregseas$sppocean[i] & biomassavemap$region == sppregseas$region[i]	plots <- vector('list', length(periods)) # time periods
rng <- range(biomassavemap$wtcpue.proj[inds], na.rm=TRUE)		for(j in 1:length(periods)){			maintitle <- paste(sppregseas$sppocean[i], sppregseas$region[i], '\n', sppregseas$season[i], periods[j])			plots[[j]] <- levelplot(wtcpue.proj ~ lon*lat, data=biomassavemap[inds & biomassavemap$period == periods[j]], at=seq(rng[1], rng[2], length.out=20), colorkey=FALSE, col.regions=cols(100), main=maintitle, ylab='lat', xlab='', scales=list(cex=0.5)) # observed averaged biomass		}
rng <- range(biomassavemap$wtcpue.proj[inds], na.rm=TRUE)		for(j in 1:length(periods)){			maintitle <- paste(sppregseas$sppocean[i], sppregseas$region[i], '\n', sppregseas$season[i], periods[j])			plots[[j]] <- levelplot(wtcpue.proj ~ lon*lat, data=biomassavemap[inds & biomassavemap$period == periods[j],], at=seq(rng[1], rng[2], length.out=20), colorkey=FALSE, col.regions=cols(100), main=maintitle, ylab='lat', xlab='', scales=list(cex=0.5)) # observed averaged biomass		}
args = paste(paste(paste('plots[[', 1:length(plots), ']]', sep=''), collapse = ', '), ', ncol=2', sep='') # the arguments
args
eval(parse(text=paste('grid.arrange(', args, ')'))) # plot all on one page
args = paste(paste(paste('plots[[', 1:length(plots), ']]', sep=''), collapse = ', '), ', ncol=', length(plots) sep='') # the arguments	eval(parse(text=paste('grid.arrange(', args, ')'))) # plot all on one page
args = paste(paste(paste('plots[[', 1:length(plots), ']]', sep=''), collapse = ', '), ', ncol=', length(plots), sep='')
eval(parse(text=paste('grid.arrange(', args, ')'))) # plot all on one page
?levelplot
rng <- range(biomassavemap$wtcpue.proj[inds], na.rm=TRUE)		for(j in 1:length(periods)){			maintitle <- paste(sppregseas$sppocean[i], sppregseas$region[i], '\n', sppregseas$season[i], periods[j])			plots[[j]] <- levelplot(wtcpue.proj ~ lon*lat, data=biomassavemap[inds & biomassavemap$period == periods[j],], at=seq(rng[1], rng[2], length.out=20), colorkey=FALSE, col.regions=cols(100), main=list(label=maintitle, cex=0.5), ylab='lat', xlab='', scales=list(cex=0.5)) # observed averaged biomass		}
args = paste(paste(paste('plots[[', 1:length(plots), ']]', sep=''), collapse = ', '), ', ncol=', length(plots), sep='') # the arguments	eval(parse(text=paste('grid.arrange(', args, ')'))) # plot all on one page
freeaxes <- '' # set this to '' to use common z-scale for all plots on a page. set to 'freeaxes_' to allow z-scale to vary for each plot
options(warn=1) # print warnings as they occurcols <- colorRampPalette(c('blue', 'purple', 'red1'), interpolate='linear')periods <- sort(unique(biomassavemap$period))pdf(width=8, height=3, file=paste(folder, 'figures/biomass_proj_maps_', freeaxes, '_.pdf', sep=''))for(i in 1:nrow(sppregseas)){	print(paste(i, 'of', nrow(sppregseas)))	inds <- biomassavemap$sppocean == sppregseas$sppocean[i] & biomassavemap$region == sppregseas$region[i]	plots <- vector('list', length(periods)) # time periods	if(freeaxes==''){		rng <- range(biomassavemap$wtcpue.proj[inds], na.rm=TRUE)		for(j in 1:length(periods)){			maintitle <- paste(sppregseas$sppocean[i], sppregseas$region[i], '\n', sppregseas$season[i], periods[j])			plots[[j]] <- levelplot(wtcpue.proj ~ lon*lat, data=biomassavemap[inds & biomassavemap$period == periods[j],], at=seq(rng[1], rng[2], length.out=20), colorkey=FALSE, col.regions=cols(100), main=list(label=maintitle, cex=0.5), ylab='lat', xlab='', scales=list(cex=0.5)) # observed averaged biomass		}	}	if(freeaxes=='freeaxes_'){		for(j in 1:length(periods)){			maintitle <- paste(sppregseas$sppocean[i], sppregseas$region[i], '\n', sppregseas$season[i], periods[j])			plots[[j]] <- levelplot(wtcpue.proj ~ lon*lat, data=biomassavemap[inds & biomassavemap$period == periods[j],], colorkey=list(axis.text=list(cex=0.5)), col.regions=cols(100), main=list(label=maintitle, cex=0.5), ylab='lat', xlab='', scales=list(cex=0.5)) # observed averaged biomass		}	}	args = paste(paste(paste('plots[[', 1:length(plots), ']]', sep=''), collapse = ', '), ', ncol=', length(plots), sep='') # the arguments	eval(parse(text=paste('grid.arrange(', args, ')'))) # plot all on one page	dev.off()#
}
options(warn=1) # print warnings as they occurcols <- colorRampPalette(c('blue', 'purple', 'red1'), interpolate='linear')periods <- sort(unique(biomassavemap$period))pdf(width=8, height=3, file=paste('figures/biomass_proj_maps_', freeaxes, '_.pdf', sep=''))
for(i in 1:nrow(sppregseas)){	print(paste(i, 'of', nrow(sppregseas)))	inds <- biomassavemap$sppocean == sppregseas$sppocean[i] & biomassavemap$region == sppregseas$region[i]	plots <- vector('list', length(periods)) # time periods	if(freeaxes==''){		rng <- range(biomassavemap$wtcpue.proj[inds], na.rm=TRUE)		for(j in 1:length(periods)){			maintitle <- paste(sppregseas$sppocean[i], sppregseas$region[i], '\n', sppregseas$season[i], periods[j])			plots[[j]] <- levelplot(wtcpue.proj ~ lon*lat, data=biomassavemap[inds & biomassavemap$period == periods[j],], at=seq(rng[1], rng[2], length.out=20), colorkey=FALSE, col.regions=cols(100), main=list(label=maintitle, cex=0.5), ylab='lat', xlab='', scales=list(cex=0.5)) # observed averaged biomass		}	}	if(freeaxes=='freeaxes_'){		for(j in 1:length(periods)){			maintitle <- paste(sppregseas$sppocean[i], sppregseas$region[i], '\n', sppregseas$season[i], periods[j])			plots[[j]] <- levelplot(wtcpue.proj ~ lon*lat, data=biomassavemap[inds & biomassavemap$period == periods[j],], colorkey=list(axis.text=list(cex=0.5)), col.regions=cols(100), main=list(label=maintitle, cex=0.5), ylab='lat', xlab='', scales=list(cex=0.5)) # observed averaged biomass		}	}	args = paste(paste(paste('plots[[', 1:length(plots), ']]', sep=''), collapse = ', '), ', ncol=', length(plots), sep='') # the arguments	eval(parse(text=paste('grid.arrange(', args, ')'))) # plot all on one page#
}dev.off()
options(warn=1) # print warnings as they occurcols <- colorRampPalette(c('blue', 'purple', 'red1'), interpolate='linear')periods <- sort(unique(biomassavemap$period))pdf(width=8, height=3, file=paste('figures/biomass_proj_maps_', freeaxes, '_.pdf', sep=''))for(i in 1:nrow(sppregseas)){	print(paste(i, 'of', nrow(sppregseas), Sys.time()))	inds <- biomassavemap$sppocean == sppregseas$sppocean[i] & biomassavemap$region == sppregseas$region[i]	plots <- vector('list', length(periods)) # time periods	if(freeaxes==''){		rng <- range(biomassavemap$wtcpue.proj[inds], na.rm=TRUE)		for(j in 1:length(periods)){			maintitle <- paste(sppregseas$sppocean[i], sppregseas$region[i], '\n', sppregseas$season[i], periods[j])			plots[[j]] <- levelplot(wtcpue.proj ~ lon*lat, data=biomassavemap[inds & biomassavemap$period == periods[j],], at=seq(rng[1], rng[2], length.out=20), colorkey=FALSE, col.regions=cols(100), main=list(label=maintitle, cex=0.5), ylab='lat', xlab='', scales=list(cex=0.5)) # observed averaged biomass		}	}	if(freeaxes=='freeaxes_'){		for(j in 1:length(periods)){			maintitle <- paste(sppregseas$sppocean[i], sppregseas$region[i], '\n', sppregseas$season[i], periods[j])			plots[[j]] <- levelplot(wtcpue.proj ~ lon*lat, data=biomassavemap[inds & biomassavemap$period == periods[j],], colorkey=list(axis.text=list(cex=0.5)), col.regions=cols(100), main=list(label=maintitle, cex=0.5), ylab='lat', xlab='', scales=list(cex=0.5)) # observed averaged biomass		}	}	args = paste(paste(paste('plots[[', 1:length(plots), ']]', sep=''), collapse = ', '), ', ncol=', length(plots), sep='') # the arguments	eval(parse(text=paste('grid.arrange(', args, ')'))) # plot all on one page#
}dev.off()
options(warn=1) # print warnings as they occurcols <- colorRampPalette(c('blue', 'purple', 'red1'), interpolate='linear')periods <- sort(unique(biomassavemap$period))pdf(width=10, height=2, file=paste('figures/biomass_proj_maps_', freeaxes, '_.pdf', sep=''))for(i in 1:nrow(sppregseas)){	print(paste(i, 'of', nrow(sppregseas), Sys.time()))	inds <- biomassavemap$sppocean == sppregseas$sppocean[i] & biomassavemap$region == sppregseas$region[i]	plots <- vector('list', length(periods)) # time periods	if(freeaxes==''){		rng <- range(biomassavemap$wtcpue.proj[inds], na.rm=TRUE)		for(j in 1:length(periods)){			maintitle <- paste(sppregseas$sppocean[i], '\n', sppregseas$region[i], '\n', sppregseas$season[i], periods[j])			plots[[j]] <- levelplot(wtcpue.proj ~ lon*lat, data=biomassavemap[inds & biomassavemap$period == periods[j],], at=seq(rng[1], rng[2], length.out=20), colorkey=FALSE, col.regions=cols(100), main=list(label=maintitle, cex=0.5), ylab='lat', xlab='', scales=list(cex=0.5)) # observed averaged biomass		}	}	if(freeaxes=='freeaxes_'){		for(j in 1:length(periods)){			maintitle <- paste(sppregseas$sppocean[i], '\n', sppregseas$region[i], '\n', sppregseas$season[i], periods[j])			plots[[j]] <- levelplot(wtcpue.proj ~ lon*lat, data=biomassavemap[inds & biomassavemap$period == periods[j],], colorkey=list(axis.text=list(cex=0.5)), col.regions=cols(100), main=list(label=maintitle, cex=0.5), ylab='lat', xlab='', scales=list(cex=0.5)) # observed averaged biomass		}	}	args = paste(paste(paste('plots[[', 1:length(plots), ']]', sep=''), collapse = ', '), ', ncol=', length(plots), sep='') # the arguments	eval(parse(text=paste('grid.arrange(', args, ')'))) # plot all on one page#
}dev.off()
?xyplot
rng <- range(biomassavemap$wtcpue.proj[inds], na.rm=TRUE)		maintitle <- paste(sppregseas$sppocean[i], '\n', sppregseas$region[i], '\n', sppregseas$season[i])		levelplot(wtcpue.proj ~ lon*lat|period, data=biomassavemap[inds,], at=seq(rng[1], rng[2], length.out=20), colorkey=FALSE, col.regions=cols(100), main=list(label=maintitle, cex=0.5), ylab=list(label='lat', cex=0.5), xlab=list(label='lon', cex=0.5), scales=list(cex=0.5)) # observed averaged biomass
levelplot(wtcpue.proj ~ lon*lat|period, data=biomassavemap[inds,], at=seq(rng[1], rng[2], length.out=20), colorkey=FALSE, col.regions=cols(100), main=list(label=maintitle, cex=1), ylab=list(label='lat', cex=0.5), xlab=list(label='lon', cex=0.5), scales=list(cex=0.5), layout = c(1,length(periods))) # observed averaged biomass
levelplot(wtcpue.proj ~ lon*lat|period, data=biomassavemap[inds,], at=seq(rng[1], rng[2], length.out=20), colorkey=FALSE, col.regions=cols(100), main=list(label=maintitle, cex=1), ylab=list(label='lat', cex=0.5), xlab=list(label='lon', cex=0.5), scales=list(cex=0.5), layout = c(length(periods), 1)) # observed averaged biomass
options(warn=1) # print warnings as they occurcols <- colorRampPalette(c('blue', 'purple', 'red1'), interpolate='linear')periods <- sort(unique(biomassavemap$period))pdf(width=10, height=2, file=paste('figures/biomass_proj_maps_', freeaxes, '_.pdf', sep=''))for(i in 1:nrow(sppregseas)){	print(paste(i, 'of', nrow(sppregseas), Sys.time()))	inds <- biomassavemap$sppocean == sppregseas$sppocean[i] & biomassavemap$region == sppregseas$region[i]	if(freeaxes==''){		rng <- range(biomassavemap$wtcpue.proj[inds], na.rm=TRUE)		maintitle <- paste(sppregseas$sppocean[i], sppregseas$region[i], sppregseas$season[i])		levelplot(wtcpue.proj ~ lon*lat|period, data=biomassavemap[inds,], at=seq(rng[1], rng[2], length.out=20), colorkey=FALSE, col.regions=cols(100), main=list(label=maintitle, cex=1), ylab=list(label='lat', cex=0.5), xlab=list(label='lon', cex=0.5), scales=list(cex=0.5), layout = c(length(periods), 1)) # observed averaged biomass	}	if(freeaxes=='freeaxes_'){		# not yet written	}	args = paste(paste(paste('plots[[', 1:length(plots), ']]', sep=''), collapse = ', '), ', ncol=', length(plots), sep='') # the arguments	eval(parse(text=paste('grid.arrange(', args, ')'))) # plot all on one page#
}dev.off()
options(warn=1) # print warnings as they occurcols <- colorRampPalette(c('blue', 'purple', 'red1'), interpolate='linear')periods <- sort(unique(biomassavemap$period))pdf(width=10, height=2, file=paste('figures/biomass_proj_maps_', freeaxes, '_.pdf', sep=''))for(i in 1:nrow(sppregseas)){	print(paste(i, 'of', nrow(sppregseas), Sys.time()))	inds <- biomassavemap$sppocean == sppregseas$sppocean[i] & biomassavemap$region == sppregseas$region[i]	if(freeaxes==''){		rng <- range(biomassavemap$wtcpue.proj[inds], na.rm=TRUE)		maintitle <- paste(sppregseas$sppocean[i], sppregseas$region[i], sppregseas$season[i])		levelplot(wtcpue.proj ~ lon*lat|period, data=biomassavemap[inds,], at=seq(rng[1], rng[2], length.out=20), colorkey=FALSE, col.regions=cols(100), main=list(label=maintitle, cex=1), ylab=list(label='lat', cex=0.5), xlab=list(label='lon', cex=0.5), scales=list(cex=0.5), layout = c(length(periods), 1)) # observed averaged biomass	}	if(freeaxes=='freeaxes_'){		# not yet written	}#	args = paste(paste(paste('plots[[', 1:length(plots), ']]', sep=''), collapse = ', '), ', ncol=', length(plots), sep='') # the arguments#	eval(parse(text=paste('grid.arrange(', args, ')'))) # plot all on one page#
}dev.off()
dev.off()
require(lattice)require(gridExtra)runtype <- 'test' # which run type to usefreeaxes <- '' # set this to '' to use common z-scale for all plots on a page. set to 'freeaxes_' to allow z-scale to vary for each plot#
load(paste('data/biomassavemap_', runtype, '.RData', sep=''))#
sppregseas <- biomassavemap[!duplicated(biomassavemap[,c('sppocean', 'region', 'season')]), c('sppocean', 'region', 'season')] # each spp/region combination to make maps for	nrow(sppregseas)# Make a set of plots on separate pages, one for each spp/region/season combinationoptions(warn=1) # print warnings as they occurcols <- colorRampPalette(c('blue', 'purple', 'red1'), interpolate='linear')periods <- sort(unique(biomassavemap$period))pdf(width=10, height=2, file=paste('figures/biomass_proj_maps_', freeaxes, '.pdf', sep=''))for(i in 1:nrow(sppregseas)){	print(paste(i, 'of', nrow(sppregseas), Sys.time()))	inds <- biomassavemap$sppocean == sppregseas$sppocean[i] & biomassavemap$region == sppregseas$region[i]	if(freeaxes==''){		rng <- range(biomassavemap$wtcpue.proj[inds], na.rm=TRUE)		maintitle <- paste(sppregseas$sppocean[i], sppregseas$region[i], sppregseas$season[i])		levelplot(wtcpue.proj ~ lon*lat|period, data=biomassavemap[inds,], at=seq(rng[1], rng[2], length.out=20), colorkey=FALSE, col.regions=cols(100), main=list(label=maintitle, cex=1), ylab=list(label='lat', cex=0.5), xlab=list(label='lon', cex=0.5), scales=list(cex=0.5), layout = c(length(periods), 1)) # observed averaged biomass	}	if(freeaxes=='freeaxes_'){		# not yet written	}#	args = paste(paste(paste('plots[[', 1:length(plots), ']]', sep=''), collapse = ', '), ', ncol=', length(plots), sep='') # the arguments#	eval(parse(text=paste('grid.arrange(', args, ')'))) # plot all on one page#
}dev.off()
?grid.arrange
sppregseas <- biomassavemap[!duplicated(biomassavemap[,c('sppocean', 'region', 'season')]), c('sppocean', 'region', 'season')] # each spp/region combination to make maps for	nrow(sppregseas)# Make a set of plots on separate pages, one for each spp/region/season combinationoptions(warn=1) # print warnings as they occurcols <- colorRampPalette(c('blue', 'purple', 'red1'), interpolate='linear')periods <- sort(unique(biomassavemap$period))pdf(width=10, height=2, file=paste('figures/biomass_proj_maps_', freeaxes, '_.pdf', sep=''))for(i in 1:nrow(sppregseas)){	print(paste(i, 'of', nrow(sppregseas), Sys.time()))	inds <- biomassavemap$sppocean == sppregseas$sppocean[i] & biomassavemap$region == sppregseas$region[i]	if(freeaxes=='fixedaxes'){		rng <- range(biomassavemap$wtcpue.proj[inds], na.rm=TRUE)		maintitle <- paste(sppregseas$sppocean[i], sppregseas$region[i], sppregseas$season[i])		thisplot <- levelplot(wtcpue.proj ~ lon*lat|period, data=biomassavemap[inds,], at=seq(rng[1], rng[2], length.out=20), colorkey=FALSE, col.regions=cols(100), main=list(label=maintitle, cex=1), ylab=list(label='lat', cex=0.5), xlab=list(label='lon', cex=0.5), scales=list(cex=0.5), layout = c(length(periods), 1)) # observed averaged biomass	}	if(freeaxes=='freeaxes'){		# not yet written	}	args = 'plots, ncol=1' # the arguments	grid.arrange(thisplot) # plot on one page#
}dev.off()
freeaxes <- 'fixedaxes' # set this to 'fixedaxes' to use common z-scale for all plots on a page. set to 'freeaxes' to allow z-scale to vary for each plot
options(warn=1) # print warnings as they occurcols <- colorRampPalette(c('blue', 'purple', 'red1'), interpolate='linear')periods <- sort(unique(biomassavemap$period))pdf(width=10, height=2, file=paste('figures/biomass_proj_maps_', freeaxes, '_.pdf', sep=''))for(i in 1:nrow(sppregseas)){	print(paste(i, 'of', nrow(sppregseas), Sys.time()))	inds <- biomassavemap$sppocean == sppregseas$sppocean[i] & biomassavemap$region == sppregseas$region[i]	if(freeaxes=='fixedaxes'){		rng <- range(biomassavemap$wtcpue.proj[inds], na.rm=TRUE)		maintitle <- paste(sppregseas$sppocean[i], sppregseas$region[i], sppregseas$season[i])		thisplot <- levelplot(wtcpue.proj ~ lon*lat|period, data=biomassavemap[inds,], at=seq(rng[1], rng[2], length.out=20), colorkey=FALSE, col.regions=cols(100), main=list(label=maintitle, cex=1), ylab=list(label='lat', cex=0.5), xlab=list(label='lon', cex=0.5), scales=list(cex=0.5), layout = c(length(periods), 1)) # observed averaged biomass	}	if(freeaxes=='freeaxes'){		# not yet written	}	args = 'plots, ncol=1' # the arguments	grid.arrange(thisplot) # plot on one page#
}dev.off()
options(warn=1) # print warnings as they occurcols <- colorRampPalette(c('blue', 'purple', 'red1'), interpolate='linear')periods <- sort(unique(biomassavemap$period))pdf(width=10, height=3, file=paste('figures/biomass_proj_maps_', freeaxes, '_.pdf', sep=''))for(i in 1:nrow(sppregseas)){	print(paste(i, 'of', nrow(sppregseas), Sys.time()))	inds <- biomassavemap$sppocean == sppregseas$sppocean[i] & biomassavemap$region == sppregseas$region[i]	if(freeaxes=='fixedaxes'){		rng <- range(biomassavemap$wtcpue.proj[inds], na.rm=TRUE)		maintitle <- paste(sppregseas$sppocean[i], sppregseas$region[i], sppregseas$season[i])		thisplot <- levelplot(wtcpue.proj ~ lon*lat|period, data=biomassavemap[inds,], at=seq(rng[1], rng[2], length.out=20), colorkey=FALSE, col.regions=cols(100), main=list(label=maintitle, cex=1), ylab=list(label='lat', cex=0.5), xlab=list(label='lon', cex=0.5), scales=list(cex=0.5), layout = c(length(periods), 1)) # observed averaged biomass	}	if(freeaxes=='freeaxes'){		# not yet written	}	args = 'plots, ncol=1' # the arguments	grid.arrange(thisplot) # plot on one page#
}dev.off()
options(warn=1) # print warnings as they occurcols <- colorRampPalette(c('black', 'blue', 'purple', 'red1'), interpolate='linear')periods <- sort(unique(biomassavemap$period))pdf(width=10, height=3, file=paste('figures/biomass_proj_maps_', freeaxes, '_.pdf', sep=''))for(i in 1:nrow(sppregseas)){	print(paste(i, 'of', nrow(sppregseas), Sys.time()))	inds <- biomassavemap$sppocean == sppregseas$sppocean[i] & biomassavemap$region == sppregseas$region[i]	if(freeaxes=='fixedaxes'){		rng <- c(0, max(biomassavemap$wtcpue.proj[inds], na.rm=TRUE))		maintitle <- paste(sppregseas$sppocean[i], sppregseas$region[i], sppregseas$season[i])		thisplot <- levelplot(wtcpue.proj ~ lon*lat|period, data=biomassavemap[inds,], at=seq(rng[1], rng[2], length.out=20), colorkey=FALSE, col.regions=cols(100), main=list(label=maintitle, cex=1), ylab=list(label='lat', cex=0.5), xlab=list(label='lon', cex=0.5), scales=list(cex=0.5), layout = c(length(periods), 1)) # observed averaged biomass	}	if(freeaxes=='freeaxes'){		# not yet written	}	args = 'plots, ncol=1' # the arguments	grid.arrange(thisplot) # plot on one page#
}dev.off()
options(warn=1) # print warnings as they occurcols <- colorRampPalette(c('grey80', 'blue', 'purple', 'red1'), interpolate='linear')periods <- sort(unique(biomassavemap$period))pdf(width=10, height=3, file=paste('figures/biomass_proj_maps_', freeaxes, '_.pdf', sep=''))for(i in 1:nrow(sppregseas)){	print(paste(i, 'of', nrow(sppregseas), Sys.time()))	inds <- biomassavemap$sppocean == sppregseas$sppocean[i] & biomassavemap$region == sppregseas$region[i]	if(freeaxes=='fixedaxes'){		rng <- c(0, max(biomassavemap$wtcpue.proj[inds], na.rm=TRUE))		maintitle <- paste(sppregseas$sppocean[i], sppregseas$region[i], sppregseas$season[i])		thisplot <- levelplot(wtcpue.proj ~ lon*lat|period, data=biomassavemap[inds,], at=seq(rng[1], rng[2], length.out=20), colorkey=FALSE, col.regions=cols(100), main=list(label=maintitle, cex=1), ylab=list(label='lat', cex=0.5), xlab=list(label='lon', cex=0.5), scales=list(cex=0.5), layout = c(length(periods), 1)) # observed averaged biomass	}	if(freeaxes=='freeaxes'){		# not yet written	}	args = 'plots, ncol=1' # the arguments	grid.arrange(thisplot) # plot on one page#
}dev.off()
sppregseas <- biomassavemap[!duplicated(biomassavemap[,c('sppocean', 'region', 'season')]), c('sppocean', 'region', 'season')] # each spp/region combination to make maps for	sppregseas <- sppregseas[order(sppregseas$region, sppregseas$season, sppregseas$sppocean),]	nrow(sppregseas)
options(warn=1) # print warnings as they occurcols <- colorRampPalette(c('grey80', 'blue', 'purple', 'red1'), interpolate='linear')periods <- sort(unique(biomassavemap$period))pdf(width=10, height=3, file=paste('figures/biomass_proj_maps_', freeaxes, '_.pdf', sep=''))for(i in 1:nrow(sppregseas)){	print(paste(i, 'of', nrow(sppregseas), Sys.time()))	inds <- biomassavemap$sppocean == sppregseas$sppocean[i] & biomassavemap$region == sppregseas$region[i]	if(freeaxes=='fixedaxes'){		rng <- c(0, max(biomassavemap$wtcpue.proj[inds], na.rm=TRUE))		maintitle <- paste(sppregseas$sppocean[i], sppregseas$region[i], sppregseas$season[i])		thisplot <- levelplot(wtcpue.proj ~ lon*lat|period, data=biomassavemap[inds,], at=seq(rng[1], rng[2], length.out=20), colorkey=FALSE, col.regions=cols(100), main=list(label=maintitle, cex=1), ylab=list(label='lat', cex=0.5), xlab=list(label='lon', cex=0.5), scales=list(cex=0.5), layout = c(length(periods), 1)) # observed averaged biomass	}	if(freeaxes=='freeaxes'){		# not yet written	}	args = 'plots, ncol=1' # the arguments	grid.arrange(thisplot) # plot on one page#
}dev.off()
?levelplot
options(warn=1) # print warnings as they occurcols <- colorRampPalette(c('grey80', 'blue', 'purple', 'red1'), interpolate='linear')periods <- sort(unique(biomassavemap$period))pdf(width=10, height=3, file=paste('figures/biomass_proj_maps_', freeaxes, '_.pdf', sep=''))for(i in 1:nrow(sppregseas)){	print(paste(i, 'of', nrow(sppregseas), Sys.time()))	inds <- biomassavemap$sppocean == sppregseas$sppocean[i] & biomassavemap$region == sppregseas$region[i]	maintitle <- paste(sppregseas$region[i], sppregseas$season[i], sppregseas$sppocean[i])	if(freeaxes=='fixedaxes'){		rng <- c(0, max(biomassavemap$wtcpue.proj[inds], na.rm=TRUE))		thisplot <- levelplot(wtcpue.proj ~ lon*lat|period, data=biomassavemap[inds,], at=seq(rng[1]-0.1, rng[2]+0.1, length.out=20), colorkey=FALSE, col.regions=cols(100), main=list(label=maintitle, cex=1), ylab=list(label='lat', cex=0.5), xlab=list(label='lon', cex=0.5), scales=list(cex=0.5), layout = c(length(periods), 1)) # observed averaged biomass	}	if(freeaxes=='freeaxes'){		thisplot <- levelplot(wtcpue.proj ~ lon*lat|period, data=biomassavemap[inds,], colorkey=list(axis.text=list(cex=0.5)), col.regions=cols(100), main=list(label=maintitle, cex=1), ylab=list(label='lat', cex=0.5), xlab=list(label='lon', cex=0.5), scales=list(cex=0.5), layout = c(length(periods), 1)) # observed averaged biomass	}	args = 'plots, ncol=1' # the arguments	grid.arrange(thisplot) # plot on one page#
}dev.off()
rng <- c(0, 1.01*max(biomassavemap$wtcpue.proj[inds], na.rm=TRUE))
runtype <- 'test' # which run type to usefreeaxes <- 'freeaxes' # set this to 'fixedaxes' to use common z-scale for all plots on a page. set to 'freeaxes' to allow z-scale to vary for each plot#
load(paste('data/biomassavemap_', runtype, '.RData', sep=''))#
sppregseas <- biomassavemap[!duplicated(biomassavemap[,c('sppocean', 'region', 'season')]), c('sppocean', 'region', 'season')] # each spp/region combination to make maps for	sppregseas <- sppregseas[order(sppregseas$region, sppregseas$season, sppregseas$sppocean),]	nrow(sppregseas)# Make a set of plots on separate pages, one for each spp/region/season combinationoptions(warn=1) # print warnings as they occurcols <- colorRampPalette(c('grey80', 'blue', 'purple', 'red1'), interpolate='linear')periods <- sort(unique(biomassavemap$period))pdf(width=10, height=3, file=paste('figures/biomass_proj_maps_', freeaxes, '_.pdf', sep=''))for(i in 1:nrow(sppregseas)){	print(paste(i, 'of', nrow(sppregseas), Sys.time()))	inds <- biomassavemap$sppocean == sppregseas$sppocean[i] & biomassavemap$region == sppregseas$region[i]	maintitle <- paste(sppregseas$region[i], sppregseas$season[i], sppregseas$sppocean[i])	if(freeaxes=='fixedaxes'){		rng <- c(0, 1.01*max(biomassavemap$wtcpue.proj[inds], na.rm=TRUE)) # slightly expanded to capture all values		thisplot <- levelplot(wtcpue.proj ~ lon*lat|period, data=biomassavemap[inds,], at=seq(rng[1], rng[2], length.out=20), colorkey=FALSE, col.regions=cols(100), main=list(label=maintitle, cex=1), ylab=list(label='lat', cex=0.5), xlab=list(label='lon', cex=0.5), scales=list(cex=0.5), layout = c(length(periods), 1)) # observed averaged biomass	}	if(freeaxes=='freeaxes'){		thisplot <- levelplot(wtcpue.proj ~ lon*lat|period, data=biomassavemap[inds,], colorkey=list(axis.text=list(cex=0.5)), col.regions=cols(100), main=list(label=maintitle, cex=1), ylab=list(label='lat', cex=0.5), xlab=list(label='lon', cex=0.5), scales=list(cex=0.5), layout = c(length(periods), 1)) # observed averaged biomass	}	args = 'plots, ncol=1' # the arguments	grid.arrange(thisplot) # plot on one page#
}dev.off()
sppregseas <- biomassavemap[!duplicated(biomassavemap[,c('sppocean', 'region', 'season')]), c('sppocean', 'region', 'season')] # each spp/region combination to make maps for	sppregseas <- sppregseas[order(sppregseas$region, sppregseas$season, sppregseas$sppocean),]	nrow(sppregseas)# Make a set of plots on separate pages, one for each spp/region/season combinationoptions(warn=1) # print warnings as they occurcols <- colorRampPalette(c('grey80', 'blue', 'purple', 'red1'), interpolate='linear')periods <- sort(unique(biomassavemap$period))pdf(width=10, height=3, file=paste('figures/biomass_proj_maps.pdf', sep=''))for(i in 1:nrow(sppregseas)){	print(paste(i, 'of', nrow(sppregseas), Sys.time()))	inds <- biomassavemap$sppocean == sppregseas$sppocean[i] & biomassavemap$region == sppregseas$region[i]	maintitle <- paste(sppregseas$region[i], sppregseas$season[i], sppregseas$sppocean[i])	rng <- c(0, 1.01*max(biomassavemap$wtcpue.proj[inds], na.rm=TRUE)) # slightly expanded to capture all values	thisplot <- levelplot(wtcpue.proj ~ lon*lat|period, data=biomassavemap[inds,], at=seq(rng[1], rng[2], length.out=20), colorkey=FALSE, col.regions=cols(100), main=list(label=maintitle, cex=1), ylab=list(label='lat', cex=0.5), xlab=list(label='lon', cex=0.5), scales=list(cex=0.5), layout = c(length(periods), 1)) # observed averaged biomass	grid.arrange(thisplot) # plot on one page#
}dev.off()
options(warn=1) # print warnings as they occurcols <- colorRampPalette(c('grey80', 'blue', 'purple', 'red1'), interpolate='linear')periods <- sort(unique(biomassavemap$period))pdf(width=10, height=3, file=paste('figures/biomass_proj_maps.pdf', sep=''))for(i in 1:nrow(sppregseas)){	print(paste(i, 'of', nrow(sppregseas), Sys.time()))	inds <- biomassavemap$sppocean == sppregseas$sppocean[i] & biomassavemap$region == sppregseas$region[i]	maintitle <- paste(sppregseas$region[i], sppregseas$season[i], sppregseas$sppocean[i])	rng <- c(0, 1.01*max(biomassavemap$wtcpue.proj[inds], na.rm=TRUE)) # slightly expanded to capture all values	thisplot <- levelplot(wtcpue.proj ~ lon*lat|period, data=biomassavemap[inds,], at=seq(rng[1], rng[2], length.out=20), colorkey=list(axis.text=list(cex=0.5)), col.regions=cols(100), main=list(label=maintitle, cex=1), ylab=list(label='lat', cex=0.5), xlab=list(label='lon', cex=0.5), scales=list(cex=0.5), layout = c(length(periods), 1)) # observed averaged biomass	grid.arrange(thisplot) # plot on one page#
}dev.off()
options(warn=1) # print warnings as they occurcols <- colorRampPalette(c('grey80', 'blue', 'purple', 'red1'), interpolate='linear')periods <- sort(unique(biomassavemap$period))pdf(width=10, height=3, file=paste('figures/biomass_proj_maps.pdf', sep=''))for(i in 1:nrow(sppregseas)){	print(paste(i, 'of', nrow(sppregseas), Sys.time()))	inds <- biomassavemap$sppocean == sppregseas$sppocean[i] & biomassavemap$region == sppregseas$region[i]	maintitle <- paste(sppregseas$region[i], sppregseas$season[i], sppregseas$sppocean[i])	rng <- c(0, 1.01*max(biomassavemap$wtcpue.proj[inds], na.rm=TRUE)) # slightly expanded to capture all values	thisplot <- levelplot(wtcpue.proj ~ lon*lat|period, data=biomassavemap[inds,], at=seq(rng[1], rng[2], length.out=20), colorkey=list(axis.text=list(cex=0.5)), col.regions=cols(100), main=list(label=maintitle, cex=1), ylab=list(label='lat', cex=0.5), xlab=list(label='lon', cex=0.5), scales=list(cex=0.5), layout = c(length(periods), 1)) # observed averaged biomass	grid.arrange(thisplot) # plot on one page#
}dev.off()
