y = 1/(1+0.01*x)
y[1]/y[1000]
y = 1/(1+0.005*x)
y[1]/y[1000]
y = 1/(1+0.001*x)
y[1]/y[1000]
y = 1/(1+0.002*x)
y[1]/y[1000]
y = 1/(1+0.003*x)
y[1]/y[1000]
0.0005*500000
0.0005*100000
0.003/249
249/0.003
1/0.35
73/1000
a=1:100
r = 1/(1+a/50)
plot(a,r)
r = 1/(1+a/10)
plot(a,r)
1/0.35
install.packages(/Users/mpinsky/Documents/Stanford/Kimbe Bay/Data/Samples/Analysis Genetic/Rmigraine_0.4.tar.gz, type='source', repos=NULL)
install.packages(''/Users/mpinsky/Documents/Stanford/Kimbe Bay/Data/Samples/Analysis Genetic/Rmigraine_0.4.tar.gz', type='source', repos=NULL)
install.packages('/Users/mpinsky/Documents/Stanford/Kimbe Bay/Data/Samples/Analysis Genetic/Rmigraine_0.4.tar.gz', type='source', repos=NULL)
fst = c(0.02141174,0.00752789,0.01364,0.00749862,0.0140749,0.00139429,0.00555897,0.0177885,0.00897316,0.01374676,0.00352074,0.01627896,0.01705109,0.01064459,0.01988448)
fst
fis = c(-0.004313846,-0.015083429,0.033442718,-0.011308127,-0.010610362,0.00307952,0.012732322,0.063620421,0.037598624,0.021261744,0.016577792,0.095588147,0.020169793,0.058187864,0.042714013)
fis
plot(fst, fis)
abline(v=0)
plot(fst, fis)
summary(lm(fis ~ fst))
runif(30, 0, 100)
reefs = runif(30, 0, 100)
l = rnorm(10000, sd=10)
summary(l)
l = rnorm(10000, mean=50, sd=10)
summary(l)
sd(l)
keep = rep(FALSE, length(l)); for(i in 1:length(reefs)) keep = keep | (abs(l-reefs[i]) < 1)
sum(keep)
hist(l)
hist(l[keep])
hist(l, breaks=100)
hist(l[keep], breaks=100)
abline(v=reefs)
abline(v=reefs, col='red')
sd(l[keep])
reefs2 = runif(10,0,100)
keep2 = rep(FALSE, length(l)); for(i in 1:length(reefs2)) keep2 = keep2 | (abs(l-reefs2[i]) < 1)
hist(l[keep2])
abline(v=reefs2, col='red')
hist(l[keep2], breaks=100)
abline(v=reefs2, col='red')
sd(l[keep2])
sds = rep(NA, 100)
l = rnorm(10000, mean=50, sd=10)
for(i in 1:length(sds)){	reefs = runif(10, 0, 100)	keep = rep(FALSE, length(l)); for(j in 1:length(reefs)) keep = keep | (abs(l-reefs[j]) < 1)	sds[i] = sd(l[keep])}
summary(sds)
hist(sds)
sds = rep(NA, 100)reefs = runif(10, 0, 100)
for(i in 1:length(sds)){	l = rnorm(1000, mean=50, sd=10)	keep = rep(FALSE, length(l)); for(j in 1:length(reefs)) keep = keep | (abs(l-reefs[j]) < 1)	sds[i] = sd(l[keep])}summary(sds)
hist(sds)
sds = rep(NA, 1000)reefs = runif(10, 0, 100)for(i in 1:length(sds)){	l = rnorm(1000, mean=50, sd=10)	keep = rep(FALSE, length(l)); for(j in 1:length(reefs)) keep = keep | (abs(l-reefs[j]) < 1)	sds[i] = sd(l[keep])}summary(sds)hist(sds)
for(i in 1:length(sds)){	l = rnorm(1000, mean=50, sd=10)	keep = rep(FALSE, length(l)); for(j in 1:length(reefs)) keep = keep | (abs(l-reefs[j]) < 1)	sds[i] = sd(l[keep])}summary(sds)hist(sds)
7000/5/2
sqrt(700)
sqrt(600)
sqrt(850)
1126/120
sqrt(c(6000, 7000, 8500)/2/9)
sqrt(c(6000, 7000, 8500)/2/5)
library(RColorBrewer)mq = c(1,1) # manmade capital quantitymp = c(1, 0.8) # pricehq = c(1,1) # human capital quantityhp = c(1, 0.4)nq = c(1,0.6) # natural capital quantitynp = c(1, 1.25)quartz(width=7,height=4)par(mfrow=c(1,2))
cols = brewer.pal(6, 'Paired')
t = c(0,1)
par(mfrow=c(1,2))
plot(t, mq, col=cols[1], type='o')
par(mfrow=c(1,2))plot(t, mq, col=cols[1], type='o', ylim=ylims)
ylims = c(0,1.1)
par(mfrow=c(1,2))plot(t, mq, col=cols[1], type='o', ylim=ylims)
par(mfrow=c(1,2))plot(t, mq, col=cols[1], type='o', ylim=ylims, pch=16)
lines(t,hq, col=cols[2], type='o', pch=16)
mq
hq
mq = c(1.05,1.05) # manmade capital quantitymp = c(1, 0.8) # pricehq = c(1,1) # human capital quantityhp = c(1, 0.4)nq = c(0.95,0.6) # natural capital quantitynp = c(1, 1.25)t = c(0,1)
par(mfrow=c(1,2))plot(t, mq, col=cols[1], type='o', ylim=ylims, pch=16)lines(t,hq, col=cols[2], type='o', pch=16)
lines(t,nq, col=cols[3], type='o', pch=16)
par(mfrow=c(1,2), las=2)plot(t, mq, col=cols[1], type='o', ylim=ylims, pch=16)lines(t,hq, col=cols[2], type='o', pch=16)lines(t,nq, col=cols[3], type='o', pch=16)
par(mfrow=c(1,2), las=2)plot(t, mq, col=cols[1], type='o', ylim=ylims, pch=16)lines(t,hq, col=cols[3], type='o', pch=16)lines(t,nq, col=cols[5], type='o', pch=16)
plot(t, mp, col=cols[2], type='o', ylim=ylims, pch=16)lines(t,hp, col=cols[4], type='o', pch=16)lines(t,np, col=cols[6], type='o', pch=16)
ylims = c(0,1.3)
par(mfrow=c(1,2), las=2)plot(t, mq, col=cols[1], type='o', ylim=ylims, pch=16)lines(t,hq, col=cols[3], type='o', pch=16)lines(t,nq, col=cols[5], type='o', pch=16)plot(t, mp, col=cols[2], type='o', ylim=ylims, pch=16)lines(t,hp, col=cols[4], type='o', pch=16)lines(t,np, col=cols[6], type='o', pch=16)
par(mfrow=c(1,3), las=2)plot(t, mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Quantity')lines(t,hq, col=cols[3], type='o', pch=16)lines(t,nq, col=cols[5], type='o', pch=16)plot(t, mp, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Price')lines(t,hp, col=cols[3], type='o', pch=16)lines(t,np, col=cols[5], type='o', pch=16)plot(t, mp*mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Value')lines(t,hp*hq, col=cols[3], type='o', pch=16)lines(t,np*nq, col=cols[5], type='o', pch=16)
quartz(width=9,height=4)par(mfrow=c(1,3), las=2)plot(t, mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Quantity')lines(t,hq, col=cols[3], type='o', pch=16)lines(t,nq, col=cols[5], type='o', pch=16)plot(t, mp, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Price')lines(t,hp, col=cols[3], type='o', pch=16)lines(t,np, col=cols[5], type='o', pch=16)plot(t, mp*mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Value')lines(t,hp*hq, col=cols[3], type='o', pch=16)lines(t,np*nq, col=cols[5], type='o', pch=16)
quartz(width=6,height=3)par(mfrow=c(1,3), las=2)plot(t, mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Quantity')lines(t,hq, col=cols[3], type='o', pch=16)lines(t,nq, col=cols[5], type='o', pch=16)plot(t, mp, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Price')lines(t,hp, col=cols[3], type='o', pch=16)lines(t,np, col=cols[5], type='o', pch=16)plot(t, mp*mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Value')lines(t,hp*hq, col=cols[3], type='o', pch=16)lines(t,np*nq, col=cols[5], type='o', pch=16)
?par
par(mfrow=c(1,3), las=1, mai=c(0.5)plot(t, mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Quantity')lines(t,hq, col=cols[3], type='o', pch=16)lines(t,nq, col=cols[5], type='o', pch=16)plot(t, mp, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Price')lines(t,hp, col=cols[3], type='o', pch=16)lines(t,np, col=cols[5], type='o', pch=16)plot(t, mp*mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Value')lines(t,hp*hq, col=cols[3], type='o', pch=16)lines(t,np*nq, col=cols[5], type='o', pch=16)
quartz(width=6,height=3)par(mfrow=c(1,3), las=1, mai=c(0.5)plot(t, mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Quantity')lines(t,hq, col=cols[3], type='o', pch=16)lines(t,nq, col=cols[5], type='o', pch=16)plot(t, mp, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Price')lines(t,hp, col=cols[3], type='o', pch=16)lines(t,np, col=cols[5], type='o', pch=16)plot(t, mp*mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Value')lines(t,hp*hq, col=cols[3], type='o', pch=16)lines(t,np*nq, col=cols[5], type='o', pch=16)
quartz(width=6,height=3)par(mfrow=c(1,3), las=1, mai=c(0.5, 0.5, 0.2, 0.1))plot(t, mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Quantity')lines(t,hq, col=cols[3], type='o', pch=16)lines(t,nq, col=cols[5], type='o', pch=16)plot(t, mp, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Price')lines(t,hp, col=cols[3], type='o', pch=16)lines(t,np, col=cols[5], type='o', pch=16)plot(t, mp*mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Value')lines(t,hp*hq, col=cols[3], type='o', pch=16)lines(t,np*nq, col=cols[5], type='o', pch=16)
x=rpois(1000, 10)
hist(x)
hist(x, breaks=c(0,30,by=1))
hist(x, breaks=seq(0,30,by=1))
hist(x, breaks=seq(-0.5,30,by=1))
hist(rpois(10000,10), breaks=seq(-0.5,30,by=1), col='grey')
hist(rpois(10000,5), breaks=seq(-0.5,30,by=1), col='grey')
hist(rpois(10000,3), breaks=seq(-0.5,30,by=1), col='grey')
hist(rpois(10000,4), breaks=seq(-0.5,30,by=1), col='grey')
hist(rpois(10000,5), breaks=seq(-0.5,30,by=1), col='grey')
x = rpois(100, 0.25)/100
hist(x, col='grey')
?rpois
x= rgeom(100,0.25)/100
hist(x, col='grey')
x[1:10]
x = rbinom(1000, 100, 0.25)
x[1:10]
x = rbinom(1000, 100, 0.25)/100
x[1:10]
hist(x, col='grey')
abline(v=0.33)
sum(x>=0.33)/length(x)
x = rbinom(1000, 50, 0.25)/100
hist(x, col='grey')
abline(v=0.33)
x = rbinom(10000, 50, 0.25)/50
hist(x, col='grey')
abline(v=0.33)
sum(x>=0.33)/length(x)
x = rbinom(1000000, 100, 0.25)/100
hist(x, col='grey')
sum(x>=0.33)/length(x)
x = rbinom(1000000, 50, 0.25)/50
sum(x>=0.33)/length(x)
Correlations among variables?
la = 1:100
fa = 4.7559*la^2.6399
plot(la, fa)
biomassave = dara.frame(region = rep(myregions, c(80,80)), year = rep(2020:2099, 2)) # total abundance (2020-2099) for
runtype <- 'testseason'############################## Choose species to project ##############################load(paste('output/modeldiag_', runtype, '.Rdata', sep='')) # model diagnosticsprojspp <- modeldiag$sppocean[modeldiag$auc.tt >= 0.75 & !is.na(modeldiag$auc.tt)] # from Elith et al., but there may be better criteria to uselength(projspp) # number of species to project to# find the files with these species for our chosen model fitfiles <- list.files(modfolder)files <- files[grepl(paste('_', runtype, '_', sep=''), files) & grepl(paste(gsub('/|\\(|\\)', '', projspp), collapse='|'), gsub('/|\\(|\\)', '', files))] # have to strip out parentheses and slashes from file and taxon names so that grep doesn't interpret themlength(files) # should match length of projspp
options(warn=1) # print warnings as they occur
load('~/Documents/Rutgers/NorthAmerican_survey_data/NEFSC/2015-01-30/Survdat.RData')
ls()
head(survdat)
t = 1:100
x = sin(t/10)
plot(t,x)
x = sin(t/30) + rnorm
x = sin(t/30) + rnorm(length(t))
plot(t,x, type='l')
x = sin(t/30) + rnorm(length(t), sd=0.3)
plot(t,x, type='l')
x = sin(t/5) + rnorm(length(t))
plot(t,x, type='l')
x = sin(t/5) + rnorm(length(t), sd=0.3)
plot(t,x, type='l')
x = sin(t/6) + rnorm(length(t), sd=0.3)
plot(t,x, type='l')
x = sin(t/6) +0.5*cos(t/10)+ rnorm(length(t), sd=0.3)
plot(t,x, type='l')
plot(t,x, type='l', bty='n', xaxt='n', yaxt='n')
plot(t,x, type='l', bty='n', xaxt='n', yaxt='n', lwd=2)
plot(t,x, type='l', bty='n', xaxt='n', yaxt='n', lwd=3)
x = sin(t/6) +0.6*cos(t/10)+ rnorm(length(t), sd=0.3)
plot(t,x, type='l', bty='n', xaxt='n', yaxt='n', lwd=3)
x = sin(t/6) +0.6*cos(t/15)+ rnorm(length(t), sd=0.3)
plot(t,x, type='l', bty='n', xaxt='n', yaxt='n', lwd=3)
y = x + 0.02*t
plot(t,y, type='l', bty='n', xaxt='n', yaxt='n', lwd=3)
y = x + 0.2*t
plot(t,y, type='l', bty='n', xaxt='n', yaxt='n', lwd=3)
range(x)
plot(t,x, type='l', bty='n', xaxt='n', yaxt='n', lwd=3, ylim=c(-2,5))
plot(t,x, type='l', bty='n', xaxt='n', yaxt='n', lwd=3, ylim=c(-2,6))
y = x + t/20
lines(t,y)
y = x + t/15
lines(t,y)
plot(t,x, type='l', bty='n', xaxt='n', yaxt='n', lwd=3, ylim=c(-2,8))
lines(t,y)
y = x + t/12
plot(t,x, type='l', bty='n', xaxt='n', yaxt='n', lwd=3, ylim=c(-2,8))
lines(t,y)
plot(t,x, type='l', bty='n', xaxt='n', yaxt='n', lwd=3, ylim=c(-2,10))
lines(t,y)
plot(t,x, type='l', bty='n', xaxt='n', yaxt='n', lwd=3, ylim=c(-2,10))
plot(t,x, type='l', bty='n', xaxt='n', yaxt='n', lwd=3, ylim=c(-2,10), col='white')
plot(t,x, type='l', bty='n', xaxt='n', yaxt='n', lwd=3, ylim=c(-2,10), col='white', bg='black')
plot(t,x, type='l', bty='n', xaxt='n', yaxt='n', lwd=3, ylim=c(-2,10), col='white', xlab='', ylab='')
plot(t,y, type='l', bty='n', xaxt='n', yaxt='n', lwd=3, ylim=c(-2,10), col='white', xlab='', ylab='')
sigma <- 18 # kmTsp = 365 # duration of spawning seasonTL = 3 # time scale for settlement events (eddy duration)C = 225 # coastline lengthr = 25 # settlement event scale (eddy size)P = Tsp/TL*C/r
P
P = Tsp/TL*C/r*fsv
P
fsv = 0.01P = Tsp/TL*C/r*fsv
P
?sample
i=1
n = 100sigma_est = numeric(n)
sigma <- 18 # kmnlarv = 400 # number of larvae sampled each yearTsp = 365 # duration of spawning seasonTL = 3 # time scale for settlement events (eddy duration)C = 225 # coastline lengthr = 25 # settlement event scale (eddy size)fsv = 0.01 # fraction of eddies with larvaeP = round(Tsp/TL*C/r*fsv) # number of eddies per season
yks = rep(0, P) # source	xks = rnorm(P, mean = 0, sd = sigma) # destination
xks
packets = sample(1:P, size=nlarv)
packets = sample(1:P, size=nlarv, replace=TRUE)
packets
j=1
sum(packets==j)
xks_larv[packets == j]
xks_larv = numeric(nlarv) # destinations of individual larvae
xks_larv[packets == j]
xks_larv = rep(NA, nlarv) # destinations of individual larvae
xks_larv[packets == j]
xks_larv[packets == j] = runif(sum(packets==j), min=xks[j]-r/2, max=xks[j]+r/2)
xks_larv[packets == j]
for(j in 1:P){ # for each packet		xks_larv[packets == j] = runif(sum(packets==j), min=xks[j]-r/2, max=xks[j]+r/2)	}
xks_larv
hist(xks_larv)
sd(xks_larv)
n = 100sigma_est = numeric(n)for(i in 1:n){	yks = rep(0, P) # sources are at 0 for simplicity	xks = rnorm(P, mean = 0, sd = sigma) # destination of packet centers	packets = sample(1:P, size=nlarv, replace=TRUE) # which packet each larva is in	xks_larv = rep(NA, nlarv) # destinations of individual larvae	for(j in 1:P){ # for each packet		xks_larv[packets == j] = runif(sum(packets==j), min=xks[j]-r/2, max=xks[j]+r/2)	}	sigma_est[i] = sd(xks_larv)}
hist(sigma_est)
n = 1000sigma_est = numeric(n)for(i in 1:n){	yks = rep(0, P) # sources are at 0 for simplicity	xks = rnorm(P, mean = 0, sd = sigma) # destination of packet centers	packets = sample(1:P, size=nlarv, replace=TRUE) # which packet each larva is in	xks_larv = rep(NA, nlarv) # destinations of individual larvae	for(j in 1:P){ # for each packet		xks_larv[packets == j] = runif(sum(packets==j), min=xks[j]-r/2, max=xks[j]+r/2)	}	sigma_est[i] = sd(xks_larv)}hist(sigma_est)
n = 10000sigma_est = numeric(n)for(i in 1:n){	yks = rep(0, P) # sources are at 0 for simplicity	xks = rnorm(P, mean = 0, sd = sigma) # destination of packet centers	packets = sample(1:P, size=nlarv, replace=TRUE) # which packet each larva is in	xks_larv = rep(NA, nlarv) # destinations of individual larvae	for(j in 1:P){ # for each packet		xks_larv[packets == j] = runif(sum(packets==j), min=xks[j]-r/2, max=xks[j]+r/2)	}	sigma_est[i] = sd(xks_larv)}hist(sigma_est)
hist(sigma_est, breaks=20, col='grey')
abline(v=c(27,35), col='red')
sigma <- 18 # kmnlarv = 400 # number of larvae sampled each yearTsp = 365 # duration of spawning seasonTL = 3 # time scale for settlement events (eddy duration)C = 225 # coastline lengthr = 25 # settlement event scale (eddy size)fsv = 0.005 # fraction of eddies with larvaeP = round(Tsp/TL*C/r*fsv) # number of eddies per seasonn = 10000sigma_est = numeric(n)for(i in 1:n){	yks = rep(0, P) # sources are at 0 for simplicity	xks = rnorm(P, mean = 0, sd = sigma) # destination of packet centers	packets = sample(1:P, size=nlarv, replace=TRUE) # which packet each larva is in	xks_larv = rep(NA, nlarv) # destinations of individual larvae	for(j in 1:P){ # for each packet		xks_larv[packets == j] = runif(sum(packets==j), min=xks[j]-r/2, max=xks[j]+r/2)	}	sigma_est[i] = sd(xks_larv)}hist(sigma_est, breaks=20, col='grey')abline(v=c(27,35), col='red')
P
sum(sigma_est>27)/length(sigma_est)sum(sigma_est>35)/length(sigma_est)
sigma <- 18 # kmnlarv = 400 # number of larvae sampled each yearTsp = 365 # duration of spawning seasonTL = 3 # time scale for settlement events (eddy duration)C = 225 # coastline length, kmr = 10 # settlement event scale (eddy size), kmfsv = 0.005 # fraction of eddies with larvaeP = round(Tsp/TL*C/r*fsv) # number of eddies per seasonP
fsv = 0.001 # fraction of eddies with larvaeP = round(Tsp/TL*C/r*fsv) # number of eddies per seasonP
n = 10000sigma_est = numeric(n)for(i in 1:n){	yks = rep(0, P) # sources are at 0 for simplicity	xks = rnorm(P, mean = 0, sd = sigma) # destination of packet centers	packets = sample(1:P, size=nlarv, replace=TRUE) # which packet each larva is in	xks_larv = rep(NA, nlarv) # destinations of individual larvae	for(j in 1:P){ # for each packet		xks_larv[packets == j] = runif(sum(packets==j), min=xks[j]-r/2, max=xks[j]+r/2)	}	sigma_est[i] = sd(xks_larv)}hist(sigma_est, breaks=20, col='grey')abline(v=c(27,35), col='red')sum(sigma_est>27)/length(sigma_est) # sum(sigma_est>35)/length(sigma_est)
sigma <- 18 # kmnlarv = 100 # number of larvae sampled each yearTsp = 365 # duration of spawning seasonTL = 3 # time scale for settlement events (eddy duration)C = 225 # coastline length, kmr = 10 # settlement event scale (eddy size), kmfsv = 0.001 # fraction of eddies with larvaeP = round(Tsp/TL*C/r*fsv) # number of eddies per seasonPn = 10000sigma_est = numeric(n)for(i in 1:n){	yks = rep(0, P) # sources are at 0 for simplicity	xks = rnorm(P, mean = 0, sd = sigma) # destination of packet centers	packets = sample(1:P, size=nlarv, replace=TRUE) # which packet each larva is in	xks_larv = rep(NA, nlarv) # destinations of individual larvae	for(j in 1:P){ # for each packet		xks_larv[packets == j] = runif(sum(packets==j), min=xks[j]-r/2, max=xks[j]+r/2)	}	sigma_est[i] = sd(xks_larv)}hist(sigma_est, breaks=20, col='grey')abline(v=c(27,35), col='red')sum(sigma_est>27)/length(sigma_est) # sum(sigma_est>35)/length(sigma_est)
quantile(sigma_est, c(0.025, 0.975)
)
P
sigma <- 18 # kmnlarv = 100 # number of larvae matched to parents each yearTsp = 365 # duration of spawning seasonTL = 20 # time scale for settlement events (eddy duration) (Ji: few days to 10s days)C = 225 # coastline length, kmr = 10 # settlement event scale (eddy size), km (Ji: 10s of kmfsv = 0.01 # fraction of eddies with larvaeP = round(Tsp/TL*C/r*fsv) # number of eddies per seasonP
n = 10000sigma_est = numeric(n)for(i in 1:n){	yks = rep(0, P) # sources are at 0 for simplicity	xks = rnorm(P, mean = 0, sd = sigma) # destination of packet centers	packets = sample(1:P, size=nlarv, replace=TRUE) # which packet each larva is in	xks_larv = rep(NA, nlarv) # destinations of individual larvae	for(j in 1:P){ # for each packet		xks_larv[packets == j] = runif(sum(packets==j), min=xks[j]-r/2, max=xks[j]+r/2)	}	sigma_est[i] = sd(xks_larv)}hist(sigma_est, breaks=20, col='grey')abline(v=c(27,35), col='red')sum(sigma_est>27)/length(sigma_est) # sum(sigma_est>35)/length(sigma_est)quantile(sigma_est, c(0.025, 0.975))
sigma <- 18 # kmnlarv = 100 # number of larvae matched to parents each yearTsp = 365 # duration of spawning seasonTL = 20 # time scale for settlement events (eddy duration) (Ji: few days to 10s days)C = 225 # coastline length, kmr = 10 # settlement event scale (eddy size), km (Ji: 10s of kmfsv = 0.1 # fraction of eddies with larvaeP = round(Tsp/TL*C/r*fsv) # number of eddies per seasonPn = 10000sigma_est = numeric(n)for(i in 1:n){	yks = rep(0, P) # sources are at 0 for simplicity	xks = rnorm(P, mean = 0, sd = sigma) # destination of packet centers	packets = sample(1:P, size=nlarv, replace=TRUE) # which packet each larva is in	xks_larv = rep(NA, nlarv) # destinations of individual larvae	for(j in 1:P){ # for each packet		xks_larv[packets == j] = runif(sum(packets==j), min=xks[j]-r/2, max=xks[j]+r/2)	}	sigma_est[i] = sd(xks_larv)}hist(sigma_est, breaks=20, col='grey')abline(v=c(27,35), col='red')sum(sigma_est>27)/length(sigma_est) # sum(sigma_est>35)/length(sigma_est)quantile(s
igma_est, c(0.025, 0.975))
sigma <- 18 # kmnlarv = 100 # number of larvae matched to parents each yearTsp = 365 # duration of spawning seasonTL = 20 # time scale for settlement events (eddy duration) (Ji: few days to 10s days)C = 225 # coastline length, kmr = 20 # settlement event scale (eddy size), km (Ji: 10s of kmfsv = 0.1 # fraction of eddies with larvaeP = round(Tsp/TL*C/r*fsv) # number of eddies per seasonPn = 10000sigma_est = numeric(n)for(i in 1:n){	yks = rep(0, P) # sources are at 0 for simplicity	xks = rnorm(P, mean = 0, sd = sigma) # destination of packet centers	packets = sample(1:P, size=nlarv, replace=TRUE) # which packet each larva is in	xks_larv = rep(NA, nlarv) # destinations of individual larvae	for(j in 1:P){ # for each packet		xks_larv[packets == j] = runif(sum(packets==j), min=xks[j]-r/2, max=xks[j]+r/2)	}	sigma_est[i] = sd(xks_larv)}hist(sigma_est, breaks=20, col='grey')abline(v=c(27,35), col='red')sum(sigma_est>27)/length(sigma_est) # sum(sigma_est>35)/length(sigma_est)quantile(s
igma_est, c(0.025, 0.975))
n = 5allocs = matrix(NA, nrow=12, ncol=5)for(i in 1:12){	locs = sort(floor(runif(n, 0,25)))	while(any(diff(locs) == 0)){		locs = sort(floor(runif(n, 0,25)))	}	allocs[i,] = locs}allocs
# Read in temperature fields and models, then make range projections# This could probably be sped up by switching from data.frames to data.tablesrequire(mgcv)require(Hmisc)require(parallel) # for multi-core calculations#
## Set working directoryif(Sys.info()["nodename"] == "pinsky-macbookair"){	setwd('~/Documents/Rutgers/Range projections/proj_ranges/')	projfolder = '../CEmodels_proj'	modfolder = '../CEModels'	climgridfolder <- '../data/'	numcorestouse <- 2	}if(Sys.info()["nodename"] == "amphiprion.deenr.rutgers.edu"){	setwd('~/Documents/range_projections/')	projfolder = 'CEmodels_proj'	modfolder = 'CEmodels'	climgridfolder <- 'data/'	numcorestouse <- 2	}# could add code for Lauren's working directory here
runtype <- 'testK6noSeas'############################## Choose species to project ##############################load(paste('output/modeldiag_', runtype, '.Rdata', sep='')) # model diagnostics
projspp <- modeldiag$sppocean[modeldiag$auc.tt >= 0.75 & !is.na(modeldiag$auc.tt) & ((modeldiag$dev.pres - modeldiag$dev.pres.null > 0.05) | (modeldiag$dev.biomass - modeldiag$dev.biomass.null > 0.05))] # from Elith et al., and deviance explained by temp must be > 5% for at least one modellength(projspp) # number of species to project to
dim(modeldiag)
projspp <- modeldiag$sppocean[modeldiag$auc.tt >= 0.75 & !is.na(modeldiag$auc.tt)] # from Elith et al., but there may be better criteria to use
length(projspp) # number of species to project to
head(modeldiag)
modeldiag[,c('sppocean', 'auc', 'auc.tt')]
