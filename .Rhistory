x = rbinom(1000000, 100, 0.25)/100
hist(x, col='grey')
sum(x>=0.33)/length(x)
x = rbinom(1000000, 50, 0.25)/50
sum(x>=0.33)/length(x)
Correlations among variables?
la = 1:100
fa = 4.7559*la^2.6399
plot(la, fa)
biomassave = dara.frame(region = rep(myregions, c(80,80)), year = rep(2020:2099, 2)) # total abundance (2020-2099) for
runtype <- 'testseason'############################## Choose species to project ##############################load(paste('output/modeldiag_', runtype, '.Rdata', sep='')) # model diagnosticsprojspp <- modeldiag$sppocean[modeldiag$auc.tt >= 0.75 & !is.na(modeldiag$auc.tt)] # from Elith et al., but there may be better criteria to uselength(projspp) # number of species to project to# find the files with these species for our chosen model fitfiles <- list.files(modfolder)files <- files[grepl(paste('_', runtype, '_', sep=''), files) & grepl(paste(gsub('/|\\(|\\)', '', projspp), collapse='|'), gsub('/|\\(|\\)', '', files))] # have to strip out parentheses and slashes from file and taxon names so that grep doesn't interpret themlength(files) # should match length of projspp
options(warn=1) # print warnings as they occur
## Set working directoriesif(Sys.info()["nodename"] == "pinsky-macbookair"){	setwd('~/Documents/Rutgers/Range projections/proj_ranges/')	projfolder = '../CEmodels_proj' # holds model projections	modfolder = '../CEModels' # holds the models	}if(Sys.info()["nodename"] == "amphiprion.deenr.rutgers.edu"){	setwd('~/Documents/range_projections/')	projfolder = 'CEmodels_proj'	modfolder = 'CEmodels'	}# could add code for Lauren's working directory here
require(Hmisc)#
#
wmean <- function(x){#
	i <- !is.na(x[,1]) & !is.na(x[,2])#
	if(sum(i) == 0) return(NA)#
	else return(weighted.mean(x[i,1], x[i,2])) # weighted mean function for summarize()#
}#
#
## load the data#
runtype <- 'test'#
load(paste('data/meanlat,lon,biomass_', runtype, '.RData', sep='')) # biomassave, meanlat, meanlon: projected biomass by year for each taxon in each region
sppregions <- sort(unique(paste(biomassave$region, biomassave$sppocean)))
quartz(width=10, height=8)
par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)	rc = 1 # row counter	cc = 0 # column counter	options(warn=1) # print warnings as they occur
i=1
inds <- paste(biomassave$region, biomassave$sppocean) == sppregions[i]		thisreg <- unique(biomassave$region[inds])		thisspp <- unique(biomassave$sppocean[inds])
sum(inds)
thisreg
thisspp
cc = cc+1#
		if(cc == 7){ cc = 1; rc = rc + 1}#
		if(rc == 7){ cc = 1; rc = 1}#
		if(i>1){ if(thisreg != oldreg){  # switch to a new page when I get to a new region#
				par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)#
				rc = 1; cc = 1#
		}}
plot(biomassave$year[inds], biomassave$sumwtcpue_1[inds], col='grey', las=1)
biomassave$year[inds]
head(biomassave)
par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)
plot(biomassave$year[inds], biomassave$summwtcpue_1[inds], col='grey', las=1)
par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)
plot(biomassave$year[inds], biomassave$summwtcpue_1[inds], col='grey', las=1, type='l)
plot(biomassave$year[inds], biomassave$summwtcpue_1[inds], col='grey', las=1, type='l')
plot(biomassave$year[inds], biomassave$summwtcpue_1[inds], col='grey', las=1, type='l')
for(j in 2:13) lines(biomassave$year[inds], biomassave[[paste('summwtcpue', j, sep='_')]][inds], col='grey')
ylims <- range(biomassave[inds, grep('summwtcpue', names(biomassave))], na.rm=TRUE)
ylims
par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)
plot(biomassave$year[inds], biomassave$summwtcpue_1[inds], col='grey', las=1, type='l', ylim=ylims)		for(j in 2:13) lines(biomassave$year[inds], biomassave[[paste('summwtcpue', j, sep='_')]][inds], col='grey')
agg <- cbind(biomassave$year, rowMeans(biomassave[inds, grep('sumwtcpue', names(biomassave))])
)
agg
dim(agg)
sum(inds)
agg <- cbind(biomassave$year[inds], rowMeans(biomassave[inds, grep('sumwtcpue', names(biomassave))]))
dim(agg)
agg
biomassave[inds, grep('sumwtcpue', names(biomassave))]
agg <- cbind(biomassave$year[inds], rowMeans(biomassave[inds, grep('summwtcpue', names(biomassave))]))
agg
agg <- cbind(biomassave$year[inds], rowMeans(biomassave[inds, grep('summwtcpue', names(biomassave))]))		lines(agg$year, agg[,2], col='black')
lines(agg[,1], agg[,2], col='black')
if(cc==1) mtext(text='Biomass', side=2, line=2.3, cex=0.6) # add y label on left of each row		if(rc==1) mtext(text=thisreg, side=3, line=1.3, cex=0.6) # add region header on top of page		oldreg = thisreg # save the previous region to see if we need a new page on the next round
pdf(file=paste('figures/biomassave_proj_', runtype, '.pdf', sep=''), width=10, height=8)	par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)	rc = 1 # row counter	cc = 0 # column counter	options(warn=1) # print warnings as they occur	for(i in 1:length(sppregions)){		inds <- paste(biomassave$region, biomassave$sppocean) == sppregions[i]		thisreg <- unique(biomassave$region[inds])		thisspp <- unique(biomassave$sppocean[inds])		# increment row and column counters as needed		cc = cc+1		if(cc == 7){ cc = 1; rc = rc + 1}		if(rc == 7){ cc = 1; rc = 1}#
		if(i>1){ if(thisreg != oldreg){  # switch to a new page when I get to a new region				par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)				rc = 1; cc = 1		}}#
		# ylims		ylims <- range(biomassave[inds, grep('summwtcpue', names(biomassave))], na.rm=TRUE)		# plot data for each GCM		plot(biomassave$year[inds], biomassave$summwtcpue_1[inds], col='grey', las=1, type='l', ylim=ylims)		for(j in 2:13) lines(biomassave$year[inds], biomassave[[paste('summwtcpue', j, sep='_')]][inds], col='grey')#
		# plot ensemble mean		agg <- cbind(biomassave$year[inds], rowMeans(biomassave[inds, grep('summwtcpue', names(biomassave))]))		lines(agg[,1], agg[,2], col='black')#
		if(cc==1) mtext(text='Biomass', side=2, line=2.3, cex=0.6) # add y label on left of each row		if(rc==1) mtext(text=thisreg, side=3, line=1.3, cex=0.6) # add region header on top of page		oldreg = thisreg # save the previous region to see if we need a new page on the next round	}	dev.off()
i
length(sppregions)
sum(inds)
range(biomassave[inds, grep('summwtcpue', names(biomassave))], na.rm=TRUE)
biomassave[inds, grep('summwtcpue', names(biomassave))]
thisspp
thisreg
i
i=109
inds <- paste(biomassave$region, biomassave$sppocean) == sppregions[i]		thisreg <- unique(biomassave$region[inds])		thisspp <- unique(biomassave$sppocean[inds])		# increment row and column counters as needed		cc = cc+1		if(cc == 7){ cc = 1; rc = rc + 1}		if(rc == 7){ cc = 1; rc = 1}#
		if(i>1){ if(thisreg != oldreg){  # switch to a new page when I get to a new region				par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)				rc = 1; cc = 1		}}#
		# ylims		ylims <- range(biomassave[inds, grep('summwtcpue', names(biomassave))], na.rm=TRUE)
ylims
i=110
inds <- paste(biomassave$region, biomassave$sppocean) == sppregions[i]		thisreg <- unique(biomassave$region[inds])		thisspp <- unique(biomassave$sppocean[inds])		# increment row and column counters as needed		cc = cc+1		if(cc == 7){ cc = 1; rc = rc + 1}		if(rc == 7){ cc = 1; rc = 1}#
		if(i>1){ if(thisreg != oldreg){  # switch to a new page when I get to a new region				par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)				rc = 1; cc = 1		}}#
		# ylims		ylims <- range(biomassave[inds, grep('summwtcpue', names(biomassave))], na.rm=TRUE)
ylims
require(mgcv)require(Hmisc)## choose which run to useruntype <- 'test'# load all projections from this runfiles <- list.files(path = projfolder, pattern=paste('summproj_', runtype, '_', sep=''))# weighted mean function to use with summarize()wmean <- function(x) return(weighted.mean(x[,1], x[,2])) # values in col 1, weights in col 2# save observed and predicted positions for lat, lon, and depthmeanpos <- list(0)#
# set up dataframes# Don't know how many regions for each taxon, so can't pre-allocate the rows (but could guess high... might speed this up)# could also calc mean depth, but would need to pull from rugosity filebiomassave = data.frame(sppocean = character(0), region = character(0), year = numeric(0)) # sum of average wtcpue across the region (2020-2099) for each survey in each model (columns)	for(i in 1:13) biomassave[[paste('summwtcpue', i, sep='_')]] <- numeric(0)meanlat = data.frame(sppocean = character(0), region = character(0), year = numeric(0)) # biomass-weighted mean latitude across the region (2020-2099) for each survey in each model (columns)	for(i in 1:13) meanlat[[paste('lat', i, sep='_')]] <- numeric(0)meanlon = data.frame(sppocean = character(0), region = character(0), year = numeric(0))	for(i in 1:13) meanlon[[paste('lon', i, sep='_')]] <- numeric(0)
options(warn=1) # print warnings as they occur
files
i=4
print(paste(i, 'of', length(files), Sys.time()))	load(paste(projfolder, '/', files[i], sep='')) # load summproj for this taxon	myregions <- sort(unique(summproj$region))	mysppocean <- gsub('.Rdata', '', gsub(paste('summproj_', runtype, '_', sep=''), '', files[i]))
print(paste(i, 'of', length(files), mysppocean, myregions, Sys.time()))
mybiomassave = data.frame(sppocean = mysppocean, region = rep(myregions, rep(80,length(myregions))), year = rep(2020:2099, length(myregions)))	mymeanlat = data.frame(sppocean = mysppocean, region = rep(myregions, rep(80,length(myregions))), year = rep(2020:2099, length(myregions)))	mymeanlon = data.frame(sppocean = mysppocean, region = rep(myregions, rep(80,length(myregions))), year = rep(2020:2099, length(myregions)))
j=1
snm <- paste('wtcpue.proj', j, sep='_')
snm
temp <- aggregate(summproj[,snm], by=list(year = summproj$year, region = summproj$region), FUN=sum)			names(temp)[3] <- paste('summwtcpue', j, sep='_')		mybiomassave <- merge(mybiomassave, temp)
head(temp)
head(summproj[,snm])
# Read in temperature fields and models, then make range projections# This could probably be sped up by switching from data.frames to data.tablesrequire(mgcv)require(Hmisc)require(parallel) # for multi-core calculations#
## Set working directoryif(Sys.info()["nodename"] == "pinsky-macbookair"){	setwd('~/Documents/Rutgers/Range projections/proj_ranges/')	projfolder = '../CEmodels_proj'	modfolder = '../CEModels'	numcorestouse <- 2	}if(Sys.info()["nodename"] == "amphiprion.deenr.rutgers.edu"){	setwd('~/Documents/range_projections/')	projfolder = 'CEmodels_proj'	modfolder = 'CEmodels'	numcorestouse <- 20	}# could add code for Lauren's working directory here############################### Choose the model fit to use###############################runtype <- 'test'runtype <- 'testseason'############################## Choose species to project ##############################load(paste('output/modeldiag_', runtype, '.Rdata', sep='')) # model diagnosticsprojspp <- modeldiag$sppocean[modeldiag$auc.tt >= 0.75 & !is.na(modeldiag$auc.tt)] # from Elith et al., but there may be better criteria to uselength(projspp) # number of species to project to# find the files with these species for our chosen model fitfiles <- list.files(modfolder)files <- files[grepl(paste('_', runtype, '_', sep=''), files) & grepl(paste(gsub('/|\\(|\\)', '', projspp), collapse='|'), gsub('/|\\(|\\)', '', files))] # have to strip out parentheses and slashes from file and taxon names so that grep doesn't interpret themlength(files) # should match length of projspp################################## Prep environmental data#################################load('data/climGrid.proj2_2015-02-10.RData') # projected temperature for each year ("clim")# drop unneeded columnsclim <- clim[,!grepl('depthgrid', names(clim))] #  refer to GCM depth gridsclim <- clim[,!grepl('bottemp.clim|surftemp.clim|delta|latgrid|longrid', names(clim))] #  the temp climatologies, deltas, and GCM lat/lon grids (1 degree)# fix season columclim$season <- as.factor(c('wi', 'sp', 'su', 'fa')[clim$season]) # convert to same format we used for model fitting# add regionfactclim$region<- as.factor(clim$region)names(clim)[names(clim)=='region'] <- 'regionfact'# add logrugosityrugos <- read.csv('data/projectiongrid_latlons.1.16th_withRugosity_2015-05-06.csv')	names(rugos)[names(rugos) == 'lon'] <- 'lon16th'	names(rugos)[names(rugos) == 'lat'] <- 'lat16th'	names(rugos)[names(rugos) == 'depth'] <- 'depth16th'	gridsize=0.25 # size of grid of the climate data, in degrees	rugos$lat <- floor(rugos$lat16th/gridsize)*gridsize + gridsize/2 # round to nearest grid center	rugos$lon <- floor(rugos$lon16th/gridsize)*gridsize + gridsize/2clim <- merge(clim, rugos) # slowdim(clim) # 11,050,240 rows
# Read in temperature fields and models, then make range projections# This could probably be sped up by switching from data.frames to data.tablesrequire(mgcv)require(Hmisc)require(parallel) # for multi-core calculations#
## Set working directoryif(Sys.info()["nodename"] == "pinsky-macbookair"){	setwd('~/Documents/Rutgers/Range projections/proj_ranges/')	projfolder = '../CEmodels_proj'	modfolder = '../CEModels'	numcorestouse <- 2	}if(Sys.info()["nodename"] == "amphiprion.deenr.rutgers.edu"){	setwd('~/Documents/range_projections/')	projfolder = 'CEmodels_proj'	modfolder = 'CEmodels'	numcorestouse <- 20	}# could add code for Lauren's working directory here############################### Choose the model fit to use###############################runtype <- 'test'runtype <- 'testseason'############################## Choose species to project ##############################load(paste('output/modeldiag_', runtype, '.Rdata', sep='')) # model diagnosticsprojspp <- modeldiag$sppocean[modeldiag$auc.tt >= 0.75 & !is.na(modeldiag$auc.tt)] # from Elith et al., but there may be better criteria to uselength(projspp) # number of species to project to# find the files with these species for our chosen model fitfiles <- list.files(modfolder)files <- files[grepl(paste('_', runtype, '_', sep=''), files) & grepl(paste(gsub('/|\\(|\\)', '', projspp), collapse='|'), gsub('/|\\(|\\)', '', files))] # have to strip out parentheses and slashes from file and taxon names so that grep doesn't interpret themlength(files) # should match length of projspp
load('../data/climGrid.proj2_2015-02-10.RData') # projected temperature for each year ("clim")
clim$season <- as.factor(c('wi', 'sp', 'su', 'fa')[clim$season]) # convert to same format we used for model fitting# add regionfactclim$region<- as.factor(clim$region)names(clim)[names(clim)=='region'] <- 'regionfact'# add logrugosityrugos <- read.csv('data/projectiongrid_latlons.1.16th_withRugosity_2015-05-06.csv')	names(rugos)[names(rugos) == 'lon'] <- 'lon16th'	names(rugos)[names(rugos) == 'lat'] <- 'lat16th'	names(rugos)[names(rugos) == 'depth'] <- 'depth16th'	gridsize=0.25 # size of grid of the climate data, in degrees	rugos$lat <- floor(rugos$lat16th/gridsize)*gridsize + gridsize/2 # round to nearest grid center	rugos$lon <- floor(rugos$lon16th/gridsize)*gridsize + gridsize/2
clim <- merge(clim, rugos) # slowdim(clim) # 11,050,240 rows
options(warn=1) # print warnings as they occur
projspp
projspporig <- projspp
projspp >- projspporig[4]
projspp <- projspporig[4]
projspp
print(paste(projspp, Sys.time()))	mod <- avemeanbiomass <- NULL	infile <- grep(projspp, files, value=TRUE)	load(paste(modfolder, '/', infile, sep='')) # loads mod and avemeanbiomass	# modify the GAMs to remove the regionfact term?	# or set all regions within the ocean of this taxon to a region name in the model? (to 'trick' the model)	# this would allow us to project outside the regions for which we had data	# for now, we don't do this	# add mean biomass by region
clim$biomassmean <- 0	clim$biomassmean[clim$regionfact %in% names(avemeanbiomass)] <- avemeanbiomass[as.character(clim$regionfact[clim$regionfact %in% names(avemeanbiomass)])] # use region to pull the correct mean biomass values
smear <- mean(exp(mods[['mygam2']]$residuals))	# get seasons from this model	myseasons <- gsub('s(bottemp):season', '', grep('bottemp', names(mods$mygam1$sp), value=TRUE), fixed=TRUE)
myseasons
if(myseasons == 's(bottemp)') myseasons <- c('wi', 'sp', 'su', 'fa') # catch if this is a non-seasonal model
if(myseasons[1] == 's(bottemp)') myseasons <- c('wi', 'sp', 'su', 'fa') # catch if this is a non-seasonal model
inds <- clim$regionfact %in% names(avemeanbiomass) & clim$season %in% myseasons # for models with season
sum(inds)
thisproj <- clim[inds,c('regionfact', 'lat', 'lon', 'depth16th', 'year', 'season')] # dataframe to hold projections for this taxon	for(i in 1:13) thisproj[[paste('wtcpue.proj_', i, sep='')]] <- NA 	# Add projected biomass density columns for each climate model
names(avemeanbiomass)
i=1
print(paste('model', i))		nd <- data.frame(regionfact = clim$regionfact[inds], surftemp = clim[[paste('surftemp.proj_', i, sep='')]][inds], bottemp = clim[[paste('bottemp.proj_', i, sep='')]][inds], logrugosity = log(clim$rugosity[inds]+0.01), biomassmean = clim$biomassmean[inds], season = clim$season[inds], row.names=1:sum(inds))
dim(nd)
preds1 <- predict.gam(mods$mygam1, newdata = nd, type='response')		preds2 <- exp(predict(mods$mygam2, newdata = nd, type='response'))		preds <- preds1*preds2*smear		preds[preds<0] <- 0
summary(preds)
length(preds)
288000/1733120
summary(nd)
summary(mods$mygam1)
pnm = paste('wtcpue.proj_', i, sep='')		thisproj[[pnm]] = preds		# set biomass projections on land to zero		thisproj[[pnm]][thisproj$depth16th > 0] <- 0
summproj <- aggregate(thisproj[,grepl('wtcpue.proj', names(thisproj))], by=list(region=thisproj$region, lat=thisproj$lat, lon=thisproj$lon, year=thisproj$year, season=thisproj$season), FUN=mean)
summary(thisproj)
summary(summproj)
dim(summproj)
18000/108320
runtype
runtype <- 'test'#runtype <- 'testseason'############################## Choose species to project ##############################load(paste('output/modeldiag_', runtype, '.Rdata', sep='')) # model diagnosticsprojspp <- modeldiag$sppocean[modeldiag$auc.tt >= 0.75 & !is.na(modeldiag$auc.tt)] # from Elith et al., but there may be better criteria to uselength(projspp) # number of species to project to# find the files with these species for our chosen model fitfiles <- list.files(modfolder)files <- files[grepl(paste('_', runtype, '_', sep=''), files) & grepl(paste(gsub('/|\\(|\\)', '', projspp), collapse='|'), gsub('/|\\(|\\)', '', files))] # have to strip out parentheses and slashes from file and taxon names so that grep doesn't interpret themlength(files) # should match length of projspp
projspp
projspporig <- projspp
projspp <- projspporig[4]
projspp
print(paste(projspp, Sys.time()))	mod <- avemeanbiomass <- NULL	infile <- grep(projspp, files, value=TRUE)	load(paste(modfolder, '/', infile, sep='')) # loads mod and avemeanbiomass
clim$biomassmean <- 0	clim$biomassmean[clim$regionfact %in% names(avemeanbiomass)] <- avemeanbiomass[as.character(clim$regionfact[clim$regionfact %in% names(avemeanbiomass)])] # use region to pull the correct mean biomass values	# smearing estimator for re-transformation bias (see Duan 1983, http://www.herc.research.va.gov/resources/faq_e02.asp)	smear <- mean(exp(mods[['mygam2']]$residuals))	# get seasons from this model	myseasons <- gsub('s(bottemp):season', '', grep('bottemp', names(mods$mygam1$sp), value=TRUE), fixed=TRUE)	if(myseasons[1] == 's(bottemp)') myseasons <- c('wi', 'sp', 'su', 'fa') # catch if this is a non-seasonal model	# rows of clim to project to#	inds <- clim$regionfact %in% names(avemeanbiomass) # for non-seasonal models	inds <- clim$regionfact %in% names(avemeanbiomass) & clim$season %in% myseasons # for models with season	# Dataframe for this species' projections	thisproj <- clim[inds,c('regionfact', 'lat', 'lon', 'depth16th', 'year', 'season')] # dataframe to hold projections for this taxon	for(i in 1:13) thisproj[[paste('wtcpue.proj_', i, sep='')]] <- NA 	# Add projected biomass density columns for each climate model
myseasons
inds <- clim$regionfact %in% names(avemeanbiomass) # for non-seasonal models
sum(inds)
sum(clim$regionfact %in% names(avemeanbiomass) & clim$season %in% myseasons)
inds <- clim$regionfact %in% names(avemeanbiomass) & clim$season %in% myseasons # for models with season or without	# Dataframe for this species' projections	thisproj <- clim[inds,c('regionfact', 'lat', 'lon', 'depth16th', 'year', 'season')] # dataframe to hold projections for this taxon	for(i in 1:13) thisproj[[paste('wtcpue.proj_', i, sep='')]] <- NA 	# Add projected biomass density columns for each climate model
i=1
print(paste('model', i))		nd <- data.frame(regionfact = clim$regionfact[inds], surftemp = clim[[paste('surftemp.proj_', i, sep='')]][inds], bottemp = clim[[paste('bottemp.proj_', i, sep='')]][inds], logrugosity = log(clim$rugosity[inds]+0.01), biomassmean = clim$biomassmean[inds], season = clim$season[inds], row.names=1:sum(inds))		preds1 <- predict.gam(mods$mygam1, newdata = nd, type='response')		preds2 <- exp(predict(mods$mygam2, newdata = nd, type='response'))		preds <- preds1*preds2*smear		preds[preds<0] <- 0
summary(nd)
dim(nd)
summary(preds)
pnm = paste('wtcpue.proj_', i, sep='')		thisproj[[pnm]] = preds # can do this because clim[inds,] and thisproj are in the same order		# set biomass projections on land to zero		thisproj[[pnm]][thisproj$depth16th > 0] <- 0
summary(thisproj)
summproj <- aggregate(thisproj[,grepl('wtcpue.proj', names(thisproj))], by=list(region=thisproj$region, lat=thisproj$lat, lon=thisproj$lon, year=thisproj$year, season=thisproj$season), FUN=mean)
summary(summproj)
summproj_new <- summproj
runtype <- 'test'# load all projections from this runfiles <- list.files(path = projfolder, pattern=paste('summproj_', runtype, '_', sep=''))# weighted mean function to use with summarize()wmean <- function(x) return(weighted.mean(x[,1], x[,2])) # values in col 1, weights in col 2# save observed and predicted positions for lat, lon, and depthmeanpos <- list(0)#
# set up dataframes# Don't know how many regions for each taxon, so can't pre-allocate the rows (but could guess high... might speed this up)# could also calc mean depth, but would need to pull from rugosity filebiomassave = data.frame(sppocean = character(0), region = character(0), year = numeric(0)) # sum of average wtcpue across the region (2020-2099) for each survey in each model (columns)	for(i in 1:13) biomassave[[paste('summwtcpue', i, sep='_')]] <- numeric(0)meanlat = data.frame(sppocean = character(0), region = character(0), year = numeric(0)) # biomass-weighted mean latitude across the region (2020-2099) for each survey in each model (columns)	for(i in 1:13) meanlat[[paste('lat', i, sep='_')]] <- numeric(0)meanlon = data.frame(sppocean = character(0), region = character(0), year = numeric(0))	for(i in 1:13) meanlon[[paste('lon', i, sep='_')]] <- numeric(0)
head(files)
i=1
i=4
paste(projfolder, '/summproj_', runtype, '_', projspp, '.Rdata', sep='')
paste(projfolder, '/', files[i], sep='')
load(paste(projfolder, '/', files[i], sep='')) # load summproj for this taxon
myregions <- sort(unique(summproj$region))	mysppocean <- gsub('.Rdata', '', gsub(paste('summproj_', runtype, '_', sep=''), '', files[i]))
myregions
mysppocean
print(paste(i, 'of', length(files), mysppocean, myregions, Sys.time()))
mybiomassave = data.frame(sppocean = mysppocean, region = rep(myregions, rep(80,length(myregions))), year = rep(2020:2099, length(myregions)))	mymeanlat = data.frame(sppocean = mysppocean, region = rep(myregions, rep(80,length(myregions))), year = rep(2020:2099, length(myregions)))	mymeanlon = data.frame(sppocean = mysppocean, region = rep(myregions, rep(80,length(myregions))), year = rep(2020:2099, length(myregions)))
j=1
head(summproj)
summary(summproj)
j
snm <- paste('wtcpue.proj', j, sep='_')		temp <- aggregate(summproj[,snm], by=list(year = summproj$year, region = summproj$region), FUN=sum)			names(temp)[3] <- paste('summwtcpue', j, sep='_')
summary(temp)
temp <- aggregate(summproj[,snm], by=list(year = summproj$year, region = summproj$region), FUN=sum, na.rm=TRUE)			names(temp)[3] <- paste('summwtcpue', j, sep='_')
summary(temp)
?weighted.mean
head(biomassave)
require(Hmisc)wmean <- function(x){	i <- !is.na(x[,1]) & !is.na(x[,2])	if(sum(i) == 0) return(NA)	else return(weighted.mean(x[i,1], x[i,2])) # weighted mean function for summarize()}## load the dataruntype <- 'test'load(paste('data/meanlat,lon,biomass_', runtype, '.RData', sep='')) # biomasssum, meanlat, meanlon: projected biomass by year for each taxon in each region## plots of change in biomass	sppregions <- sort(unique(paste(biomasssum$region, biomasssum$sppocean)))	# quartz(width=10, height=8)	pdf(file=paste('figures/biomasssum_proj_', runtype, '.pdf', sep=''), width=10, height=8)	par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)	rc = 1 # row counter	cc = 0 # column counter	options(warn=1) # print warnings as they occur
biomasssum <- biomassave
sppregions <- sort(unique(paste(biomasssum$region, biomasssum$sppocean)))
dev.off()
dev.off()
pdf(file=paste('figures/biomasssum_proj_', runtype, '.pdf', sep=''), width=10, height=8)	par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)	rc = 1 # row counter	cc = 0 # column counter	options(warn=1) # print warnings as they occur
sppregions
i=108
inds <- paste(biomasssum$region, biomasssum$sppocean) == sppregions[i]		thisreg <- unique(biomasssum$region[inds])		thisspp <- unique(biomasssum$sppocean[inds])		# increment row and column counters as needed		cc = cc+1		if(cc == 7){ cc = 1; rc = rc + 1}		if(rc == 7){ cc = 1; rc = 1}#
		if(i>1){ if(thisreg != oldreg){  # switch to a new page when I get to a new region				par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)				rc = 1; cc = 1		}}#
		# ylims		ylims <- range(biomasssum[inds, grep('summwtcpue', names(biomasssum))], na.rm=TRUE)
is.inf(ylims[1])
is.infinite(ylims[1])
dev.off()
pdf(file=paste('figures/biomasssum_proj_', runtype, '.pdf', sep=''), width=10, height=8)	par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)	rc = 1 # row counter	cc = 0 # column counter	options(warn=1) # print warnings as they occur	for(i in 1:length(sppregions)){		inds <- paste(biomasssum$region, biomasssum$sppocean) == sppregions[i]		thisreg <- unique(biomasssum$region[inds])		thisspp <- unique(biomasssum$sppocean[inds])		# increment row and column counters as needed		cc = cc+1		if(cc == 7){ cc = 1; rc = rc + 1}		if(rc == 7){ cc = 1; rc = 1}#
		if(i>1){ if(thisreg != oldreg){  # switch to a new page when I get to a new region				par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)				rc = 1; cc = 1		}}#
		# ylims		ylims <- range(biomasssum[inds, grep('summwtcpue', names(biomasssum))], na.rm=TRUE)		if(is.infinite(ylims[1])) ylims = c(0,1)		# plot data for each GCM		plot(biomasssum$year[inds], biomasssum$summwtcpue_1[inds], col='grey', las=1, type='l', ylim=ylims)		for(j in 2:13) lines(biomasssum$year[inds], biomasssum[[paste('summwtcpue', j, sep='_')]][inds], col='grey')#
		# plot ensemble mean		agg <- cbind(biomasssum$year[inds], rowMeans(biomasssum[inds, grep('summwtcpue', names(biomasssum))]))		lines(agg[,1], agg[,2], col='black')#
		if(cc==1) mtext(text='Biomass index', side=2, line=2.3, cex=0.6) # add y label on left of each row		if(rc==1) mtext(text=thisreg, side=3, line=1.3, cex=0.6) # add region header on top of page		oldreg = thisreg # save the previous region to see if we need a new page on the next round	}	dev.off()
quartz(width=10, height=8)
par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)	rc = 1 # row counter	cc = 0 # column counter	options(warn=1) # print warnings as they occur
i=1
print(i)		inds <- paste(biomasssum$region, biomasssum$sppocean) == sppregions[i]		thisreg <- unique(biomasssum$region[inds])		thisspp <- unique(biomasssum$sppocean[inds])		# increment row and column counters as needed		cc = cc+1		if(cc == 7){ cc = 1; rc = rc + 1}		if(rc == 7){ cc = 1; rc = 1}#
		if(i>1){ if(thisreg != oldreg){  # switch to a new page when I get to a new region				par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)				rc = 1; cc = 1		}}#
		# ylims		ylims <- c(0, max(biomasssum[inds, grep('summwtcpue', names(biomasssum))], na.rm=TRUE)) # will warn if all values are NA		if(is.infinite(ylims[1])) ylims = c(0,1)		# plot data for each GCM		plot(biomasssum$year[inds], biomasssum$summwtcpue_1[inds], col='grey', las=1, type='l', ylim=ylims, main=thisspp)
sppregions <- sort(unique(paste(biomasssum$region, biomasssum$sppocean)))	length(sppregions)	# quartz(width=10, height=8)	pdf(file=paste('figures/biomasssum_proj_', runtype, '.pdf', sep=''), width=10, height=8)	par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)	rc = 1 # row counter	cc = 0 # column counter	options(warn=1) # print warnings as they occur	for(i in 1:length(sppregions)){		print(i)		inds <- paste(biomasssum$region, biomasssum$sppocean) == sppregions[i]		thisreg <- unique(biomasssum$region[inds])		thisspp <- unique(biomasssum$sppocean[inds])		# increment row and column counters as needed		cc = cc+1		if(cc == 7){ cc = 1; rc = rc + 1}		if(rc == 7){ cc = 1; rc = 1}#
		if(i>1){ if(thisreg != oldreg){  # switch to a new page when I get to a new region				par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)				rc = 1; cc = 1		}}#
		# ylims		ylims <- c(0, max(biomasssum[inds, grep('summwtcpue', names(biomasssum))], na.rm=TRUE)) # will warn if all values are NA		if(is.infinite(ylims[1])) ylims = c(0,1)		# plot data for each GCM		plot(biomasssum$year[inds], biomasssum$summwtcpue_1[inds], col='grey', las=1, type='l', ylim=ylims)		for(j in 2:13) lines(biomasssum$year[inds], biomasssum[[paste('summwtcpue', j, sep='_')]][inds], col='grey')#
		# plot ensemble mean		agg <- cbind(biomasssum$year[inds], rowMeans(biomasssum[inds, grep('summwtcpue', names(biomasssum))]))		lines(agg[,1], agg[,2], col='black')#
		if(cc==1) mtext(text='Biomass index', side=2, line=2.3, cex=0.6) # add y label on left of each row		if(rc==1) mtext(text=thisreg, side=3, line=1.3, cex=0.6) # add region header on top of page		oldreg = thisreg # save the previous region to see if we need a new page on the next round	}	dev.off()
ylims
sppregions <- sort(unique(paste(biomasssum$region, biomasssum$sppocean)))	length(sppregions)	# quartz(width=10, height=8)	pdf(file=paste('figures/biomasssum_proj_', runtype, '.pdf', sep=''), width=10, height=8)	par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)	rc = 1 # row counter	cc = 0 # column counter	options(warn=1) # print warnings as they occur	for(i in 1:length(sppregions)){		print(i)		inds <- paste(biomasssum$region, biomasssum$sppocean) == sppregions[i]		thisreg <- unique(biomasssum$region[inds])		thisspp <- unique(biomasssum$sppocean[inds])		# increment row and column counters as needed		cc = cc+1		if(cc == 7){ cc = 1; rc = rc + 1}		if(rc == 7){ cc = 1; rc = 1}#
		if(i>1){ if(thisreg != oldreg){  # switch to a new page when I get to a new region				par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)				rc = 1; cc = 1		}}#
		# ylims		ylims <- c(0, max(biomasssum[inds, grep('summwtcpue', names(biomasssum))], na.rm=TRUE)) # will warn if all values are NA		if(is.infinite(ylims[2])) ylims = c(0,1)		# plot data for each GCM		plot(biomasssum$year[inds], biomasssum$summwtcpue_1[inds], col='grey', las=1, type='l', ylim=ylims)		for(j in 2:13) lines(biomasssum$year[inds], biomasssum[[paste('summwtcpue', j, sep='_')]][inds], col='grey')#
		# plot ensemble mean		agg <- cbind(biomasssum$year[inds], rowMeans(biomasssum[inds, grep('summwtcpue', names(biomasssum))]))		lines(agg[,1], agg[,2], col='black')#
		if(cc==1) mtext(text='Biomass index', side=2, line=2.3, cex=0.6) # add y label on left of each row		if(rc==1) mtext(text=thisreg, side=3, line=1.3, cex=0.6) # add region header on top of page		oldreg = thisreg # save the previous region to see if we need a new page on the next round	}	dev.off()
sppregions <- sort(unique(paste(biomasssum$region, biomasssum$sppocean)))	length(sppregions)	# quartz(width=10, height=8)	pdf(file=paste('figures/biomasssum_proj_', runtype, '.pdf', sep=''), width=10, height=8)	par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)	rc = 1 # row counter	cc = 0 # column counter	options(warn=1) # print warnings as they occur	for(i in 1:length(sppregions)){		if(i %% 100 == 0) print(i)		inds <- paste(biomasssum$region, biomasssum$sppocean) == sppregions[i]		thisreg <- unique(biomasssum$region[inds])		thisspp <- unique(biomasssum$sppocean[inds])		# increment row and column counters as needed		cc = cc+1		if(cc == 7){ cc = 1; rc = rc + 1}		if(rc == 7){ cc = 1; rc = 1}#
		if(i>1){ if(thisreg != oldreg){  # switch to a new page when I get to a new region				par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)				rc = 1; cc = 1		}}#
		# ylims		ylims <- c(0, max(biomasssum[inds, grep('summwtcpue', names(biomasssum))], na.rm=TRUE)) # will warn if all values are NA		if(is.infinite(ylims[2])) ylims = c(0,1)		# plot data for each GCM		plot(biomasssum$year[inds], biomasssum$summwtcpue_1[inds], col='grey', las=1, type='l', ylim=ylims, main=thisspp)		for(j in 2:13) lines(biomasssum$year[inds], biomasssum[[paste('summwtcpue', j, sep='_')]][inds], col='grey')#
		# plot ensemble mean		agg <- cbind(biomasssum$year[inds], rowMeans(biomasssum[inds, grep('summwtcpue', names(biomasssum))]))		lines(agg[,1], agg[,2], col='black')#
		if(cc==1) mtext(text='Biomass index', side=2, line=2.3, cex=0.6) # add y label on left of each row		if(rc==1) mtext(text=thisreg, side=3, line=1.3, cex=0.6) # add region header on top of page		oldreg = thisreg # save the previous region to see if we need a new page on the next round	}	dev.off()
sppregions <- sort(unique(paste(meanlat$region, meanlat$sppocean)))	length(sppregions)	# quartz(width=10, height=8)	pdf(file=paste('figures/meanlat_proj_', runtype, '.pdf', sep=''), width=10, height=8)	par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)	rc = 1 # row counter	cc = 0 # column counter	options(warn=1) # print warnings as they occur
for(i in 1:10){		print(i)		inds <- paste(meanlat$region, meanlat$sppocean) == sppregions[i]		thisreg <- unique(meanlat$region[inds])		thisspp <- unique(meanlat$sppocean[inds])		# increment row and column counters as needed		cc = cc+1		if(cc == 7){ cc = 1; rc = rc + 1}		if(rc == 7){ cc = 1; rc = 1}#
		if(i>1){ if(thisreg != oldreg){  # switch to a new page when I get to a new region				par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)				rc = 1; cc = 1		}}#
		# ylims		ylims <- range(meanlat[inds, grep('lat', names(meanlat))], na.rm=TRUE) # will warn if all values are NA		if(is.infinite(ylims[1])) ylims = c(0,1)		# plot data for each GCM		plot(meanlat$year[inds], meanlat$lat_1[inds], col='grey', las=1, type='l', ylim=ylims, main=thisspp)		for(j in 2:13) lines(meanlat$year[inds], meanlat[[paste('lat', j, sep='_')]][inds], col='grey')#
		# plot ensemble mean		agg <- cbind(meanlat$year[inds], rowMeans(meanlat[inds, grep('lat', names(meanlat))]))		lines(agg[,1], agg[,2], col='black')#
		if(cc==1) mtext(text='Mean latitude (°N)', side=2, line=2.3, cex=0.6) # add y label on left of each row		if(rc==1) mtext(text=thisreg, side=3, line=1.3, cex=0.6) # add region header on top of page		oldreg = thisreg # save the previous region to see if we need a new page on the next round	}	dev.off()
ylims <- range(meanlat[meanlat$region == thisreg, grep('lat', names(meanlat))])
ylims
sppregions <- sort(unique(paste(meanlat$region, meanlat$sppocean)))	length(sppregions)	# quartz(width=10, height=8)	pdf(file=paste('figures/meanlat_proj_', runtype, '.pdf', sep=''), width=10, height=8)	par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)	rc = 1 # row counter	cc = 0 # column counter	options(warn=1) # print warnings as they occur
for(i in 1:10){		if(i %% 100 == 0) print(i)		inds <- paste(meanlat$region, meanlat$sppocean) == sppregions[i]		thisreg <- unique(meanlat$region[inds])		thisspp <- unique(meanlat$sppocean[inds])		# increment row and column counters as needed		cc = cc+1		if(cc == 7){ cc = 1; rc = rc + 1}		if(rc == 7){ cc = 1; rc = 1}#
		if(i>1){ if(thisreg != oldreg){  # switch to a new page when I get to a new region				par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)				rc = 1; cc = 1		}}#
		# ylims#		ylims <- range(meanlat[inds, grep('lat', names(meanlat))], na.rm=TRUE) # set ylims for this species/region		ylims <- range(meanlat[meanlat$region == thisreg, grep('lat', names(meanlat))])		#
		# plot data for each GCM		plot(meanlat$year[inds], meanlat$lat_1[inds], col='grey', las=1, type='l', ylim=ylims, main=thisspp)		for(j in 2:13) lines(meanlat$year[inds], meanlat[[paste('lat', j, sep='_')]][inds], col='grey')#
		# plot ensemble mean		agg <- cbind(meanlat$year[inds], rowMeans(meanlat[inds, grep('lat', names(meanlat))]))		lines(agg[,1], agg[,2], col='black')#
		if(cc==1) mtext(text='Mean latitude (°N)', side=2, line=2.3, cex=0.6) # add y label on left of each row		if(rc==1) mtext(text=thisreg, side=3, line=1.3, cex=0.6) # add region header on top of page		oldreg = thisreg # save the previous region to see if we need a new page on the next round	}	dev.off()
sppregions <- sort(unique(paste(meanlat$region, meanlat$sppocean)))	length(sppregions)	# quartz(width=10, height=8)	pdf(file=paste('figures/meanlat_proj_', runtype, '.pdf', sep=''), width=10, height=8)	par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)	rc = 1 # row counter	cc = 0 # column counter	options(warn=1) # print warnings as they occur#	for(i in 1:length(sppregions)){	for(i in 1:10){		if(i %% 100 == 0) print(i)		inds <- paste(meanlat$region, meanlat$sppocean) == sppregions[i]		thisreg <- unique(meanlat$region[inds])		thisspp <- unique(meanlat$sppocean[inds])		# increment row and column counters as needed		cc = cc+1		if(cc == 7){ cc = 1; rc = rc + 1}		if(rc == 7){ cc = 1; rc = 1}#
		if(i>1){ if(thisreg != oldreg){  # switch to a new page when I get to a new region				par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)				rc = 1; cc = 1		}}#
		# ylims		ylims <- range(meanlat[inds, grep('lat', names(meanlat))], na.rm=TRUE) # set ylims for this species/region#		ylims <- range(meanlat[meanlat$region == thisreg, grep('lat', names(meanlat))])	# set ylims for the region#
		# plot data for each GCM		plot(meanlat$year[inds], meanlat$lat_1[inds], col='grey', las=1, type='l', ylim=ylims, main=thisspp)		for(j in 2:13) lines(meanlat$year[inds], meanlat[[paste('lat', j, sep='_')]][inds], col='grey')#
		# plot ensemble mean		agg <- cbind(meanlat$year[inds], rowMeans(meanlat[inds, grep('lat', names(meanlat))]))		lines(agg[,1], agg[,2], col='black')#
		if(cc==1) mtext(text='Mean latitude (°N)', side=2, line=2.3, cex=0.6) # add y label on left of each row		if(rc==1) mtext(text=thisreg, side=3, line=1.3, cex=0.6) # add region header on top of page		oldreg = thisreg # save the previous region to see if we need a new page on the next round	}	dev.off()
sppregions <- sort(unique(paste(meanlat$region, meanlat$sppocean)))	length(sppregions)	# quartz(width=10, height=8)	pdf(file=paste('figures/meanlat_proj_', runtype, '.pdf', sep=''), width=10, height=8)	par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)	rc = 1 # row counter	cc = 0 # column counter	options(warn=1) # print warnings as they occur	for(i in 1:length(sppregions)){		if(i %% 100 == 0) print(i)		inds <- paste(meanlat$region, meanlat$sppocean) == sppregions[i]		thisreg <- unique(meanlat$region[inds])		thisspp <- unique(meanlat$sppocean[inds])		# increment row and column counters as needed		cc = cc+1		if(cc == 7){ cc = 1; rc = rc + 1}		if(rc == 7){ cc = 1; rc = 1}#
		if(i>1){ if(thisreg != oldreg){  # switch to a new page when I get to a new region				par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)				rc = 1; cc = 1		}}#
		# ylims		ylims <- range(meanlat[inds, grep('lat', names(meanlat))], na.rm=TRUE) # set ylims for this species in this region#		ylims <- range(meanlat[meanlat$region == thisreg, grep('lat', names(meanlat))])	# set ylims for the whole region#
		# plot data for each GCM		plot(meanlat$year[inds], meanlat$lat_1[inds], col='grey', las=1, type='l', ylim=ylims, main=thisspp)		for(j in 2:13) lines(meanlat$year[inds], meanlat[[paste('lat', j, sep='_')]][inds], col='grey')#
		# plot ensemble mean		agg <- cbind(meanlat$year[inds], rowMeans(meanlat[inds, grep('lat', names(meanlat))]))		lines(agg[,1], agg[,2], col='black')#
		if(cc==1) mtext(text='Mean latitude (°N)', side=2, line=2.3, cex=0.6) # add y label on left of each row		if(rc==1) mtext(text=thisreg, side=3, line=1.3, cex=0.6) # add region header on top of page		oldreg = thisreg # save the previous region to see if we need a new page on the next round	}	dev.off()
ylims
sppregions <- sort(unique(paste(meanlat$region, meanlat$sppocean)))	length(sppregions)	# quartz(width=10, height=8)	pdf(file=paste('figures/meanlat_proj_', runtype, '.pdf', sep=''), width=10, height=8)	par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)	rc = 1 # row counter	cc = 0 # column counter	options(warn=1) # print warnings as they occur	for(i in 1:length(sppregions)){		if(i %% 100 == 0) print(i)		inds <- paste(meanlat$region, meanlat$sppocean) == sppregions[i]		thisreg <- unique(meanlat$region[inds])		thisspp <- unique(meanlat$sppocean[inds])		# increment row and column counters as needed		cc = cc+1		if(cc == 7){ cc = 1; rc = rc + 1}		if(rc == 7){ cc = 1; rc = 1}#
		if(i>1){ if(thisreg != oldreg){  # switch to a new page when I get to a new region				par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)				rc = 1; cc = 1		}}#
		# ylims		ylims <- range(meanlat[inds, grep('lat', names(meanlat))], na.rm=TRUE) # set ylims for this species in this region#		ylims <- range(meanlat[meanlat$region == thisreg, grep('lat', names(meanlat))])	# set ylims for the whole region		if(is.infinite(ylims[1])) ylims = c(0,1)#
		# plot data for each GCM		plot(meanlat$year[inds], meanlat$lat_1[inds], col='grey', las=1, type='l', ylim=ylims, main=thisspp)		for(j in 2:13) lines(meanlat$year[inds], meanlat[[paste('lat', j, sep='_')]][inds], col='grey')#
		# plot ensemble mean		agg <- cbind(meanlat$year[inds], rowMeans(meanlat[inds, grep('lat', names(meanlat))]))		lines(agg[,1], agg[,2], col='black')#
		if(cc==1) mtext(text='Mean latitude (°N)', side=2, line=2.3, cex=0.6) # add y label on left of each row		if(rc==1) mtext(text=thisreg, side=3, line=1.3, cex=0.6) # add region header on top of page		oldreg = thisreg # save the previous region to see if we need a new page on the next round	}	dev.off()
2100-2006+1
(2100-2006+1)*12
## Set working directoriesif(Sys.info()["nodename"] == "pinsky-macbookair"){	setwd('~/Documents/Rutgers/Range projections/proj_ranges/')	projfolder = '../CEmodels_proj' # holds model projections (outside Git)	modfolder = '../CEModels' # holds the models (outside Git)	}if(Sys.info()["nodename"] == "amphiprion.deenr.rutgers.edu"){	setwd('~/Documents/range_projections/')	projfolder = 'CEmodels_proj'	modfolder = 'CEmodels'	}# could add code for Lauren's working directory here
require(Hmisc)wmean <- function(x){	i <- !is.na(x[,1]) & !is.na(x[,2])	if(sum(i) == 0) return(NA)	else return(weighted.mean(x[i,1], x[i,2])) # weighted mean function for summarize()}## load the dataruntype <- 'test'load(paste('data/meanlat,lon,biomass_', runtype, '.RData', sep='')) # biomasssum, meanlat, meanlon: projected biomass by year for each taxon in each region## plots of change in biomass	sppregions <- sort(unique(paste(biomasssum$region, biomasssum$sppocean)))	length(sppregions)	# quartz(width=10, height=8)	pdf(file=paste('figures/biomasssum_proj_', runtype, '.pdf', sep=''), width=10, height=8)	par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)	rc = 1 # row counter	cc = 0 # column counter	options(warn=1) # print warnings as they occur	for(i in 1:length(sppregions)){		if(i %% 100 == 0) print(i)		inds <- paste(biomasssum$region, biomasssum$sppocean) == sppregions[i]		thisreg <- unique(biomasssum$region[inds])		thisspp <- unique(biomasssum$sppocean[inds])		# increment row and column counters as needed		cc = cc+1		if(cc == 7){ cc = 1; rc = rc + 1}		if(rc == 7){ cc = 1; rc = 1}#
		if(i>1){ if(thisreg != oldreg){  # switch to a new page when I get to a new region				par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)				rc = 1; cc = 1		}}#
		# ylims		ylims <- c(0, max(biomasssum[inds, grep('summwtcpue', names(biomasssum))], na.rm=TRUE)) # will warn if all values are NA		if(is.infinite(ylims[2])) ylims = c(0,1)		# plot data for each GCM		plot(biomasssum$year[inds], biomasssum$summwtcpue_1[inds], col='grey', las=1, type='l', ylim=ylims, main=thisspp)		for(j in 2:13) lines(biomasssum$year[inds], biomasssum[[paste('summwtcpue', j, sep='_')]][inds], col='grey')#
		# plot ensemble mean		agg <- cbind(biomasssum$year[inds], rowMeans(biomasssum[inds, grep('summwtcpue', names(biomasssum))]))		lines(agg[,1], agg[,2], col='black')#
		if(cc==1) mtext(text='Biomass index', side=2, line=2.3, cex=0.6) # add y label on left of each row		if(rc==1) mtext(text=thisreg, side=3, line=1.3, cex=0.6) # add region header on top of page		oldreg = thisreg # save the previous region to see if we need a new page on the next round	}	dev.off()
sppregions <- sort(unique(paste(meanlat$region, meanlat$sppocean)))	length(sppregions)	# quartz(width=10, height=8)	pdf(file=paste('figures/meanlat_proj_', runtype, '.pdf', sep=''), width=10, height=8)	par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)	rc = 1 # row counter	cc = 0 # column counter	options(warn=1) # print warnings as they occur	for(i in 1:length(sppregions)){		if(i %% 100 == 0) print(i)		inds <- paste(meanlat$region, meanlat$sppocean) == sppregions[i]		thisreg <- unique(meanlat$region[inds])		thisspp <- unique(meanlat$sppocean[inds])		# increment row and column counters as needed		cc = cc+1		if(cc == 7){ cc = 1; rc = rc + 1}		if(rc == 7){ cc = 1; rc = 1}#
		if(i>1){ if(thisreg != oldreg){  # switch to a new page when I get to a new region				par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)				rc = 1; cc = 1		}}#
		# ylims		ylims <- range(meanlat[inds, grep('lat', names(meanlat))], na.rm=TRUE) # set ylims for this species in this region#		ylims <- range(meanlat[meanlat$region == thisreg, grep('lat', names(meanlat))])	# set ylims for the whole region		if(is.infinite(ylims[1])) ylims = c(0,1)#
		# plot data for each GCM		plot(meanlat$year[inds], meanlat$lat_1[inds], col='grey', las=1, type='l', ylim=ylims, main=thisspp)		for(j in 2:13) lines(meanlat$year[inds], meanlat[[paste('lat', j, sep='_')]][inds], col='grey')#
		# plot ensemble mean		agg <- cbind(meanlat$year[inds], rowMeans(meanlat[inds, grep('lat', names(meanlat))]))		lines(agg[,1], agg[,2], col='black')#
		if(cc==1) mtext(text='Mean latitude (°N)', side=2, line=2.3, cex=0.6) # add y label on left of each row		if(rc==1) mtext(text=thisreg, side=3, line=1.3, cex=0.6) # add region header on top of page		oldreg = thisreg # save the previous region to see if we need a new page on the next round	}	dev.off()
i=200
if(i %% 100 == 0) print(i)		inds <- paste(meanlat$region, meanlat$sppocean) == sppregions[i]		thisreg <- unique(meanlat$region[inds])		thisspp <- unique(meanlat$sppocean[inds])		# increment row and column counters as needed		cc = cc+1		if(cc == 7){ cc = 1; rc = rc + 1}		if(rc == 7){ cc = 1; rc = 1}#
		if(i>1){ if(thisreg != oldreg){  # switch to a new page when I get to a new region				par(mfrow = c(6,6), mai=c(0.3, 0.3, 0.2, 0.05), cex.main=0.7, cex.axis=0.8, omi=c(0,0.2,0.1,0), mgp=c(2.8, 0.7, 0), font.main=3)				rc = 1; cc = 1		}}#
		# ylims		ylims <- range(meanlat[inds, grep('lat', names(meanlat))], na.rm=TRUE) # set ylims for this species in this region
sum(inds)
meanlat[inds, grep('lat', names(meanlat))]
names(meanlat)
head(meanlat)
head(meanlat[inds,])
require(mgcv)require(Hmisc)## choose which run to useruntype <- 'test'# load all projections from this runfiles <- list.files(path = projfolder, pattern=paste('summproj_', runtype, '_', sep=''))# weighted mean function to use with summarize()wmean <- function(x) return(weighted.mean(x[,1], x[,2], na.rm=TRUE)) # values in col 1, weights in col 2# save observed and predicted positions for lat, lon, and depthmeanpos <- list(0)#
# set up dataframes# Don't know how many regions for each taxon, so can't pre-allocate the rows (but could guess high... might speed this up)# could also calc mean depth, but would need to pull from rugosity filebiomasssum = data.frame(sppocean = character(0), region = character(0), year = numeric(0)) # sum of average wtcpue across the region (2020-2099) for each survey in each model (columns)	for(i in 1:13) biomasssum[[paste('summwtcpue', i, sep='_')]] <- numeric(0)meanlat = data.frame(sppocean = character(0), region = character(0), year = numeric(0)) # biomass-weighted mean latitude across the region (2020-2099) for each survey in each model (columns)	for(i in 1:13) meanlat[[paste('lat', i, sep='_')]] <- numeric(0)meanlon = data.frame(sppocean = character(0), region = character(0), year = numeric(0))	for(i in 1:13) meanlon[[paste('lon', i, sep='_')]] <- numeric(0)#
options(warn=1) # print warnings as they occur
grep('pleuronectes quadri', files)
i=281
# load data for this species	load(paste(projfolder, '/', files[i], sep='')) # load summproj for this taxon	myregions <- sort(unique(summproj$region))	mysppocean <- gsub('.Rdata', '', gsub(paste('summproj_', runtype, '_', sep=''), '', files[i]))
paste(projfolder, '/', files[i], sep='')
myregions <- sort(unique(summproj$region))	mysppocean <- gsub('.Rdata', '', gsub(paste('summproj_', runtype, '_', sep=''), '', files[i]))
myregions
mysppocean
print(paste(i, 'of', length(files), mysppocean, myregions, Sys.time()))	# set up dataframes for this taxon	mybiomasssum = data.frame(sppocean = mysppocean, region = rep(myregions, rep(80,length(myregions))), year = rep(2020:2099, length(myregions)))	mymeanlat = data.frame(sppocean = mysppocean, region = rep(myregions, rep(80,length(myregions))), year = rep(2020:2099, length(myregions)))	mymeanlon = data.frame(sppocean = mysppocean, region = rep(myregions, rep(80,length(myregions))), year = rep(2020:2099, length(myregions)))
j=1
snm <- paste('wtcpue.proj', j, sep='_')
wmean
temp <- summarize(summproj[,c('lat', snm)], by=list(region = summproj$region, year = summproj$year), FUN=wmean)
head(temp)
summproj[,c('lat', snm)]
head(summproj[,c('lat', snm)])
summary(summproj[,c('lat', snm)])
length(unique(summproj$lat))
table(summproj$lat, is.na(summproj$wtcpue.proj_1))
table(summproj$region, is.na(summproj$wtcpue.proj_1))
wmean(summproj[summproj$region == 'AFSC_EBS' & summproj$year == 2020,c('lat', 'wtcpue.proj_1')])
head(summproj[summproj$region == 'AFSC_EBS' & summproj$year == 2020,c('lat', 'wtcpue.proj_1')])
summary(summproj[summproj$region == 'AFSC_EBS' & summproj$year == 2020,c('lat', 'wtcpue.proj_1')])
weighted.mean(summproj$lat[summproj$region == 'AFSC_EBS'])
weighted.mean(summproj$lat[summproj$region == 'AFSC_EBS' & summproj$year == 2020], summproj$wtcpue.proj_1[summproj$region == 'AFSC_EBS' & summproj$year == 2020])
weighted.mean(summproj$lat[summproj$region == 'AFSC_EBS' & summproj$year == 2020], summproj$wtcpue.proj_1[summproj$region == 'AFSC_EBS' & summproj$year == 2020], na.rm=TRUE)
?weighted.mean
sum(summproj$wtcpue.proj_1[summproj$region == 'AFSC_EBS' & summproj$year == 2020])
sum(summproj$wtcpue.proj_1[summproj$region == 'AFSC_EBS' & summproj$year == 2020], na.rm=TRUE)
weighted.mean(x=summproj$lat[summproj$region == 'AFSC_EBS' & summproj$year == 2020], w=summproj$wtcpue.proj_1[summproj$region == 'AFSC_EBS' & summproj$year == 2020], na.rm=TRUE)
wmean <- function(x){ # values in col 1, weights in col 2	inds <- !is.na(x[,1]) & !is.na(x[,2])	return(weighted.mean(x[inds,1], x[inds,2])) }
temp <- summarize(summproj[,c('lat', snm)], by=list(region = summproj$region, year = summproj$year), FUN=wmean)
summary(temp)
names(temp)[3] <- paste('lat', j, sep='_')
summary(temp)
## Set working directoriesif(Sys.info()["nodename"] == "pinsky-macbookair"){	setwd('~/Documents/Rutgers/Range projections/proj_ranges/')	}if(Sys.info()["nodename"] == "amphiprion.deenr.rutgers.edu"){	setwd('~/Documents/range_projections/')	}# could add code for Lauren's working directory here#
################################### Read netCDF files from IPCC ###################################require(ncdf4) # for reading ncdf filesrequire(chron) # for converting julian daysnyrs = function(x) as.numeric(as.character(years(x))) # return year from a chron objectmo = function(x) 1+as.numeric(strftime(x, format='%m')) # return monthjmo2mo = function(x, startmonth=1){ # converts from julian month (starting at 1 for startmonth in some year) to month 1:12	temp = (x %% 12) + startmonth-1	temp[temp>12] = temp[temp>12]-12	temp[temp==0] = 12	return(temp)}su = function(x) sort(unique(x)) # sort unique values from a vectormeanbyyear = function(x, yr) aggregate(list(x=x), by=list(yr=yr), FUN=mean)$x # take mean of x by levels of yr and return xlinearsmooth = function(x, yr=1:length(x)){ # smooth a time-series with a linear regresion	mod = lm(x ~ yr)	return(predict(mod, new.data = data.frame(yr = seq(min(yr), max(yr)))))}linearb = function(x, yr=1:length(x)){ # return slope of x vs. yrs. require at least 3 datapoints	if(sum(!is.na(x))>2){		mod = lm(as.numeric(x) ~ yr)		return(coef(mod)[2])	} else {		return(NA)	}}agmean = function(x, by) aggregate(list(x), by=by, FUN=mean)[,2] # aggregate and take the mean of a vector. NOTE: much faster to reshape so that I can use straight up meanseason = function(x){ # convert month of year to season	out = rep(NA, length(x))	out[x <= 3 & x>0] = 1	out[x <= 6 & x>3] = 2	out[x <= 9 & x>6] = 3	out[x <= 12 & x>9] = 4	return(out)}roundto = function(x,y){r = which.min(abs(x-y)); return(y[r])} # rounds x to nearest number in yload("data/trawl_allregionsforprojections_2014-11-03.RData") # loads dat to get base years for each regionclim = read.csv('data/climGrid_2015-02-02.csv', row.names=1, stringsAsFactors=FALSE); type='Grid'
load("data/trawl_allregionsforprojections_2015-02-02.RData") # loads dat to get base years for each region
dat = dat[!is.na(dat$lat) & !is.na(dat$lon),] # remove NA lat/lon	dat$lon[dat$lon < 0] = dat$lon[dat$lon < 0] + 360 # fix lons to only positive to match climate data# Get range of years, lats, and lons for each region. Use Jan 1960 as the base date (month 1)	dat$dates = chron(dates. = paste('01', dat$month, dat$year, sep='/'), format='d/m/y') # don't have day information in dat	baseyrs = aggregate(list(rng = dat$year), by=list(region = dat$region), FUN=range)	basedates = aggregate(list(min = dat$dates), by=list(region = dat$region), FUN=min)		basedates = merge(basedates, aggregate(list(max = dat$dates), by=list(region = dat$region), FUN=max))		basedates$minmo = (nyrs(basedates$min)-1960)*12+mo(basedates$min) # months since Jan 1960		basedates$maxmo = (nyrs(basedates$max)-1960)*12+mo(basedates$max)	basemonths = aggregate(list(months = mo(dat$dates)), by=list(region = dat$region), FUN=su) # list the months	baselats = aggregate(list(rng = dat$lat), by=list(region = dat$region), FUN=range)		baselats$rng = cbind(floor(baselats$rng[,1])+0.5, ceiling(baselats$rng[,2])-0.5) # round to nearest degree center	baselons = aggregate(list(rng = dat$lon), by=list(region = dat$region), FUN=range)		baselons$rng = cbind(floor(baselons$rng[,1])+0.5, ceiling(baselons$rng[,2])-0.5) # round to nearest degree center	basedepths = aggregate(list(rng = dat$depth), by=list(region = dat$region), FUN=range, na.rm=T)		basedepths$rng[,1] = 0 # to make sure I get all the way to the surface	regs = sort(unique(dat$region))	rm(dat)
install.packages('ncdf4')
install.packages('chron')
require(ncdf4) # for reading ncdf files
require(chron) # for converting julian days
nyrs = function(x) as.numeric(as.character(years(x))) # return year from a chron objectmo = function(x) 1+as.numeric(strftime(x, format='%m')) # return monthjmo2mo = function(x, startmonth=1){ # converts from julian month (starting at 1 for startmonth in some year) to month 1:12	temp = (x %% 12) + startmonth-1	temp[temp>12] = temp[temp>12]-12	temp[temp==0] = 12	return(temp)}su = function(x) sort(unique(x)) # sort unique values from a vectormeanbyyear = function(x, yr) aggregate(list(x=x), by=list(yr=yr), FUN=mean)$x # take mean of x by levels of yr and return xlinearsmooth = function(x, yr=1:length(x)){ # smooth a time-series with a linear regresion	mod = lm(x ~ yr)	return(predict(mod, new.data = data.frame(yr = seq(min(yr), max(yr)))))}linearb = function(x, yr=1:length(x)){ # return slope of x vs. yrs. require at least 3 datapoints	if(sum(!is.na(x))>2){		mod = lm(as.numeric(x) ~ yr)		return(coef(mod)[2])	} else {		return(NA)	}}agmean = function(x, by) aggregate(list(x), by=by, FUN=mean)[,2] # aggregate and take the mean of a vector. NOTE: much faster to reshape so that I can use straight up meanseason = function(x){ # convert month of year to season	out = rep(NA, length(x))	out[x <= 3 & x>0] = 1	out[x <= 6 & x>3] = 2	out[x <= 9 & x>6] = 3	out[x <= 12 & x>9] = 4	return(out)}roundto = function(x,y){r = which.min(abs(x-y)); return(y[r])} # rounds x to nearest number in yload("data/trawl_allregionsforprojections_2015-02-02.RData") # loads dat to get base years for each regionclim = read.csv('data/climGrid_2015-02-02.csv', row.names=1, stringsAsFactors=FALSE); type='Grid'
dat = dat[!is.na(dat$lat) & !is.na(dat$lon),] # remove NA lat/lon	dat$lon[dat$lon < 0] = dat$lon[dat$lon < 0] + 360 # fix lons to only positive to match climate data# Get range of years, lats, and lons for each region. Use Jan 1960 as the base date (month 1)	dat$dates = chron(dates. = paste('01', dat$month, dat$year, sep='/'), format='d/m/y') # don't have day information in dat	baseyrs = aggregate(list(rng = dat$year), by=list(region = dat$region), FUN=range)	basedates = aggregate(list(min = dat$dates), by=list(region = dat$region), FUN=min)		basedates = merge(basedates, aggregate(list(max = dat$dates), by=list(region = dat$region), FUN=max))		basedates$minmo = (nyrs(basedates$min)-1960)*12+mo(basedates$min) # months since Jan 1960		basedates$maxmo = (nyrs(basedates$max)-1960)*12+mo(basedates$max)	basemonths = aggregate(list(months = mo(dat$dates)), by=list(region = dat$region), FUN=su) # list the months	baselats = aggregate(list(rng = dat$lat), by=list(region = dat$region), FUN=range)		baselats$rng = cbind(floor(baselats$rng[,1])+0.5, ceiling(baselats$rng[,2])-0.5) # round to nearest degree center	baselons = aggregate(list(rng = dat$lon), by=list(region = dat$region), FUN=range)		baselons$rng = cbind(floor(baselons$rng[,1])+0.5, ceiling(baselons$rng[,2])-0.5) # round to nearest degree center	basedepths = aggregate(list(rng = dat$depth), by=list(region = dat$region), FUN=range, na.rm=T)		basedepths$rng[,1] = 0 # to make sure I get all the way to the surface	regs = sort(unique(dat$region))
agency = c('CNRM-CERFACS', 'IPSL', 'IPSL', 'MOHC', 'MPI-M', 'MPI-M', 'MRI', 'NCAR', 'NCC', 'NCC', 'NOAA-GFDL', 'NOAA-GFDL', 'NOAA-GFDL')model = c('CNRM-CM5', 'IPSL-CM5A-MR', 'IPSL-CM5B-LR', 'HadGem2-CC', 'MPI-ESM-LR', 'MPI-ESM-MR', 'MRI-CGCM3', 'CCSM4', 'NorESM1-M', 'NorESM1-ME', 'GFDL-CM3', 'GFDL-ESM2G', 'GFDL-ESM2M')
j=1
print(j)	file = paste('Froelicher_data/', agency[j], '/', model[j], '/rcp85/thetao_all_regrid_malin.nc', sep='')	print(paste(agency[j], model[j]))	n = nc_open(file) # Open the netCDF file	lats = ncvar_get(n, 'LAT')	lons = ncvar_get(n, 'LON')	depths = ncvar_get(n, 'LEV')	startmonth = 1; startyear = 2006	if(model[j]=='HadGem2-CC'){	startmonth = 12; startyear = 2005} # HadGEM2-CC model is different for RCP8.5 (see readme.txt), starts Dec 2005	times = 1:length(ncvar_get(n, 'TIME')) # time, measured in months since the start month/year for this model
