gsub('/|(|)', '', files)
gsub('/|\(|\)', '', files)
?regexp
gsub('\(', '', files)
gsub('(', '', files)
gsub('\\(', '', files)
files <- list.files(modfolder)files <- files[grepl(paste('_', runtype, '_', sep=''), files) & grepl(paste(gsub('/|\\(|\\)', '', projspp), collapse='|'), gsub('/|\\(|\\)', '', files)]length(files)
files <- list.files(modfolder)files <- files[grepl(paste('_', runtype, '_', sep=''), files) & grepl(paste(gsub('/|\\(|\\)', '', projspp), collapse='|'), gsub('/|\\(|\\)', '', files))]length(files)
length(projspp)
smear = numeric(length(projspp))options(warn=1) # print warnings as they occurss = 1 # counter for smear
s
s=1
print(paste(s, 'of', length(projspp), projspp[s]))
load(paste(modfolder, '/', files[s], sep=''))
ls()
names(mods)
load('Output/climGrid.proj2_2015-02-02.RData') # projected climate for each year ("clim")
load('data/climGrid.proj2_2015-02-02.RData') # projected climate for each year ("clim")
getwd()
load('data/climGrid.proj2_2015-02-10.RData') # projected climate for each year ("clim")
smear[ss] = mean(exp(mods[['mygam2']]$residuals))
smear[ss]
head(clim)
clim$season = as.factor(c('wi', 'sp', 'su', 'fa')[clim$season] # convert to same format we used for model fitting
)
thisproj = clim[,c('lat', 'lon', 'depth', 'year')] # dataframe to hold projections for this taxon
for(i in 1:13) thisproj[[paste('wtcpue.proj_', i, sep='')]] = NA
clim$season = as.factor(c('wi', 'sp', 'su', 'fa')[clim$season]) # convert to same format we used for model fitting
head(clim)
summary(clim$season)
load('data/climGrid.proj2_2015-02-10.RData') # projected climate for each year ("clim")
summary(clim$season)
sort(unique(clim$season))
clim$season = as.factor(c('wi', 'sp', 'su', 'fa')[clim$season]) # convert to same format we used for model fitting
summary(mygam1)
print(paste(s, 'of', length(projspp), projspp[s]))
load(paste(modfolder, '/', files[s], sep=''))
summary(mods$mygam1)
ls()
head(avemeanbiomass)
summary(clim)
clim$regionfact <- as.factor(clim$region)
rugos <- read.csv('data/projectiongrid_latlons.1.16th_withRugosity_2015-05-06.csv')
head(rugos)
dim(rugos)
grepl('depthgrid', names(clim))
names(clim)grepl('depthgrid', names(clim))
names(clim)[grepl('depthgrid', names(clim))]
clim <- clim[,!grepl('depthgrid', names(clim))]
dim(clim)
?regexp
clim <- clim[,!grepl('bottemp.clim$|surftemp.clim$', names(clim))] #  refer to GCM depth grids
summary(clim)
names(clim)[grepl('bottemp.clim|surftemp.clim|delta', names(clim))]
clim <- clim[,!grepl('bottemp.clim|surftemp.clim|delta', names(clim))] #  the temp climatologies and deltas
head(clim)
clim <- clim[,!grepl('regionfact', names(clim))]
head(clim)
clim$region<- as.factor(clim$region)
clim$region<- as.factor(clim$region)names(clim)[names(clim)=='region'] <- 'regionfact'
head(clim)
summary(clim$lat)
sort(unique(clim$lat))
clim <- clim[,!grepl('bottemp.clim|surftemp.clim|delta|latgrid|longrid', names(clim))] #  the temp climatologies, deltas, and GCM lat/lon grids (1 degree)
head(clim)
head(rugos)
?setname
names(rugos)[names(rugos) == 'lon'] <- 'lon16th'names(rugos)[names(rugos) == 'lat'] <- 'lat16th'
gridsize=0.25 # size of grid of the climate data, in degrees
test <- sort(unique(rugos$lat16th))
length(Test)
length(test)
test
cbind(test[1:50], floor(test[1:50]/gridsize)*gridsize + gridsize/2)
rugos$lat = floor(rugos$lat16th/gridsize)*gridsize + gridsize/2 # round to nearest grid center	rugos$lon = floor(rugos$lon16th/gridsize)*gridsize + gridsize/2
intersect(names(clim), names(rugos))
rugos <- read.csv('data/projectiongrid_latlons.1.16th_withRugosity_2015-05-06.csv')	names(rugos)[names(rugos) == 'lon'] <- 'lon16th'	names(rugos)[names(rugos) == 'lat'] <- 'lat16th'	names(rugos)[names(rugos) == 'depth'] <- 'depth16th'	gridsize=0.25 # size of grid of the climate data, in degrees	rugos$lat <- floor(rugos$lat16th/gridsize)*gridsize + gridsize/2 # round to nearest grid center	rugos$lon <- floor(rugos$lon16th/gridsize)*gridsize + gridsize/2
intersect(names(clim), names(rugos))
dim(clim)
dim(rugos)
690640*4
clim <- merge(clim, rugos)
dim(clim) # 2.7M rows
dim(clim)*16
dim(clim)*4
690640*16
smear = numeric(length(projspp))options(warn=1) # print warnings as they occurss = 1 # counter for smear
s=1
thisproj = clim[,c('lat', 'lon', 'depth16th', 'year')] # dataframe to hold projections for this taxon
dim(thiprof)
dim(thisproj)
for(i in 1:13) thisproj[[paste('wtcpue.proj_', i, sep='')]] = NA
i=1
head(clim)
summary(mods[[1]])
avemeanbiomass
names(avemeanbiomass)
avemeanbiomass[clim$region[clim$region %in% names(avemeanbiomass)]][1:10]
clim$region[clim$region %in% names(avemeanbiomass)][1:10]
as.character(clim$region[clim$region %in% names(avemeanbiomass)][1:10])
avemeanbiomass[as.character(clim$region[clim$region %in% names(avemeanbiomass)])][1:10]
avemeanbiomass[as.character(clim$region[clim$region %in% names(avemeanbiomass)])][1:100]
clim$biomassmean[clim$region %in% names(avemeanbiomass)] = avemeanbiomass[as.character(clim$region[clim$region %in% names(avemeanbiomass)])] # use region to pull the right mean biomass values
sort(unique(clim$biomassmean))
clim$biomassmean <- 0	clim$biomassmean[clim$region %in% names(avemeanbiomass)] = avemeanbiomass[as.character(clim$region[clim$region %in% names(avemeanbiomass)])] # use region to pull the right mean biomass values
sort(unique(clim$biomassmean))
sort(unique(clim[, c('region', 'biomassmean')]))
sort(unique(clim[, c('regionfact', 'biomassmean')]))
unique(clim[, c('regionfact', 'biomassmean')])
summary(mods[[1]])
thisproj = clim[,c('regionfact', 'lat', 'lon', 'depth16th', 'year')] # dataframe to hold projections for this taxon
for(i in 1:13) thisproj[[paste('wtcpue.proj_', i, sep='')]] = NA
i
i=1
?ifthen
??ifelse
?ifelse
files[s]
ifelse(grepl('Atl', files[s]), 'Atl', 'Pac')
myocean <- ifelse(grepl('Atl', files[s]), 'Atl', 'Pac')
clim$ocean[clim$region %in% c("AFSC_Aleutians", "AFSC_EBS", "AFSC_GOA", "AFSC_WCTri", "NWFSC_WCAnn")] <- "Pac"clim$ocean[clim$region %in% c("DFO_NewfoundlandFall", "DFO_NewfoundlandSpring", "DFO_ScotianShelf","DFO_SoGulf","NEFSC_NEUSFall", "NEFSC_NEUSSpring","SEFSC_GOMex")] <- "Atl"
length(clim$biomassmean[!(clim$regionfact %in% names(avemeanbiomass)) & clim$ocean == myocean])
mean(avemeanbiomass)
clim$biomassmean <- 0	clim$biomassmean[clim$regionfact %in% names(avemeanbiomass)] = avemeanbiomass[as.character(clim$regionfact[clim$regionfact %in% names(avemeanbiomass)])] # use region to pull the right mean biomass values	clim$biomassmean[!(clim$regionfact %in% names(avemeanbiomass)) & clim$ocean == myocean] = mean(avemeanbiomass)
unique(clim[, c('regionfact', 'biomassmean')])
clim <- clim[,!grepl('ocean', names(clim))]
dim(clim)
names(clim)
i
nd = data.frame(regionfact = clim$regionfact, surftemp = clim[[paste('surftemp.proj_', i, sep='')]], bottemp = clim[[paste('bottemp.proj_', i, sep='')]], biomassmean = clim$biomassmean, , row.names=1:sum(inds))		preds1 = predict.gam(mods$mygam1, newdata = nd, type='response')
inds = clim$regionfact %in% names(avemeanbiomass)
sum(inds)
unique(clim$regionfact[inds])
inds = clim$regionfact %in% names(avemeanbiomass)
summary(mods[[1]])
nd = data.frame(regionfact = clim$regionfact[inds], surftemp = clim[[paste('surftemp.proj_', i, sep='')]][inds], bottemp = clim[[paste('bottemp.proj_', i, sep='')]][inds], biomassmean = clim$biomassmean[inds], , row.names=1:sum(inds))
i
paste('surftemp.proj_', i, sep='')
head(clim[[paste('surftemp.proj_', i, sep='')]])
head(clim[[paste('surftemp.proj_', i, sep='')]][inds])
sum(inds)
head(which(inds))
clim[[paste('surftemp.proj_', i, sep='')]][which(inds)[1]]
clim[which(inds)[1],]
clim[which(inds)[1:20],]
nd = data.frame(regionfact = clim$regionfact[inds], surftemp = clim[[paste('surftemp.proj_', i, sep='')]][inds], bottemp = clim[[paste('bottemp.proj_', i, sep='')]][inds], biomassmean = clim$biomassmean[inds], row.names=1:sum(inds))
preds1 = predict.gam(mods$mygam1, newdata = nd, type='response')
nd = data.frame(regionfact = clim$regionfact[inds], surftemp = clim[[paste('surftemp.proj_', i, sep='')]][inds], bottemp = clim[[paste('bottemp.proj_', i, sep='')]][inds], logrugosity = log(clim$rugosity[inds]), biomassmean = clim$biomassmean[inds], row.names=1:sum(inds))
preds1 = predict.gam(mods$mygam1, newdata = nd, type='response')
summary(preds1)
summary(nd)
summary(mods$mygam1)
nd <- nd[,!grepl('surftemp', names(nd))]
head(nd)
preds1 = predict.gam(mods$mygam1, newdata = nd, type='response')
preds1 = predict(mods$mygam1, newdata = nd, type='response')
nd = data.frame(regionfact = clim$regionfact[inds], surftemp = clim[[paste('surftemp.proj_', i, sep='')]][inds], bottemp = clim[[paste('bottemp.proj_', i, sep='')]][inds], logrugosity = log(clim$rugosity[inds]+0.01), biomassmean = clim$biomassmean[inds], row.names=1:sum(inds))		preds1 = predict.gam(mods$mygam1, newdata = nd, type='response')
summary(preds1)
preds2 = exp(predict(mods$mygam2, newdata = nd, type='response'))
summary(preds2)
preds = preds1*preds2*smear		preds[preds<0] = 0
length(preds1)
length(preds2)
preds = preds1*preds2
preds = preds1*preds2*smear
smear = mean(exp(mods[['mygam2']]$residuals))
preds = preds1*preds2*smear
summary(preds)
preds[preds<0] = 0
pnm = paste('wtcpue.proj_', i, sep='')
pnm
thisproj[[pnm]] = preds
thisproj <- clim[inds,c('regionfact', 'lat', 'lon', 'depth16th', 'year')] # dataframe to hold projections for this taxon
thisproj[[pnm]] = preds
summary(clim$depth16th)
length(		thisproj[[pnm]][thisproj$depth16th > 0])
nrow(thisproj)
thisproj[[pnm]][thisproj$depth16th > 0] <- 0
# Dataframe for this species' projections	thisproj <- clim[inds,c('regionfact', 'lat', 'lon', 'depth16th', 'year')] # dataframe to hold projections for this taxon	# Calculate predictions for 2020-2100 for each model	for(i in 1:13){		print(paste('model', i))		nd <- data.frame(regionfact = clim$regionfact[inds], surftemp = clim[[paste('surftemp.proj_', i, sep='')]][inds], bottemp = clim[[paste('bottemp.proj_', i, sep='')]][inds], logrugosity = log(clim$rugosity[inds]+0.01), biomassmean = clim$biomassmean[inds], row.names=1:sum(inds))		preds1 <- predict.gam(mods$mygam1, newdata = nd, type='response')		preds2 <- exp(predict(mods$mygam2, newdata = nd, type='response'))		preds <- preds1*preds2*smear		preds[preds<0] <- 0#
		pnm = paste('wtcpue.proj_', i, sep='')		thisproj[[pnm]] = preds		# set biomass projections on land to zero		thisproj[[pnm]][thisproj$depth16th > 0] <- 0	}
summproj <- aggregate(thisproj[,grepl('wtcpue.proj', names(thisproj))], by=list(lat=thisproj$lat, lon=thisproj$lon), FUN=mean)
dim(summproj)
nrow(unique(clim[clim$region %in% names(avemeanbiomass), c('lat', 'lon')]))
head(summproj)
head(clim)
thisproj$season = clim$season[inds]
hist(rugos$rugosity)
hist(log(rugos$rugosity))
hist(log(rugos$rugosity+0.01))
summary(rugos$rugosity)
head(thisproj)
summproj <- aggregate(thisproj[,grepl('wtcpue.proj', names(thisproj))], by=list(region=thisproj$region, lat=thisproj$lat, lon=thisproj$lon, year=thisproj$year, season=thisproj$season), FUN=mean)
dim(summproj)
nrow(unique(clim[clim$region %in% names(avemeanbiomass), c('lat', 'lon', 'year', 'season')]))
projfolder
write.csv(summproj, file=paste(projfolder, '/summproj_', runtype, '_', projspp[j], '.csv', sep='')) # write out the projections
j=1
write.csv(summproj, file=paste(projfolder, '/summproj_', runtype, '_', projspp[j], '.csv', sep='')) # write out the projections
save(summproj, file=paste(projfolder, '/summproj_', runtype, '_', projspp[j], '.Rdata', sep='')) # write out the projections
dim(thisproj)
dim(summproj)
?fork
??fork
??parallel
?parallel
require(parallel)
?fork
?parallel
library(help = "parallel")
?detectCores
detectCores()
?mcparallel
p <- mcparallel(1:10)#
q <- mcparallel(1:20)#
# wait for both jobs to finish and collect all results#
res <- mccollect(list(p, q))
res
p <- mcparallel(1:10)#
mccollect(p, wait = FALSE, 10) # will retrieve the result (since it's fast)#
mccollect(p, wait = FALSE)     # will signal the job as terminating#
mccollect(p, wait = FALSE)     # there is no longer such a job
jobs <- lapply(1:10, function(x) mcparallel(rnorm(x), name = x))#
mccollect(jobs)
?system
?mclapply
doprojection <- function(projspp, infile, clim, projfolder, modfolder, runtype){ 	mod <- avemeanbiomass <- NULL	load(paste(modfolder, '/', infile, sep='')) # loads mod and avemeanbiomass	# modify the GAMs to remove the regionfact term?	# or set all regions within the ocean of this taxon to a region name in the model? (to 'trick' the model)	# this would allow us to project outside the regions for which we had data	# for now, we don't do this	# add mean biomass by region	# use a dummy mean for regions in myocean but outside the model inference	clim$biomassmean <- 0	clim$biomassmean[clim$regionfact %in% names(avemeanbiomass)] <- avemeanbiomass[as.character(clim$regionfact[clim$regionfact %in% names(avemeanbiomass)])] # use region to pull the correct mean biomass values	# smearing estimator for re-transformation bias (see Duan 1983, http://www.herc.research.va.gov/resources/faq_e02.asp)	smear <- mean(exp(mods[['mygam2']]$residuals))	# rows of clim to project to	# NEED TO TRIM TO CORRECT SEASON AS WELL IF MODEL IS SEASONAL	inds <- clim$regionfact %in% names(avemeanbiomass)	# Dataframe for this species' projections	thisproj <- clim[inds,c('regionfact', 'lat', 'lon', 'depth16th', 'year', 'season')] # dataframe to hold projections for this taxon	for(i in 1:13) thisproj[[paste('wtcpue.proj_', i, sep='')]] <- NA 	# Add projected biomass density columns for each climate model#
	# Calculate predictions for 2020-2100 for each model	for(i in 1:13){ # this alone takes a long time		print(paste('model', i))		nd <- data.frame(regionfact = clim$regionfact[inds], surftemp = clim[[paste('surftemp.proj_', i, sep='')]][inds], bottemp = clim[[paste('bottemp.proj_', i, sep='')]][inds], logrugosity = log(clim$rugosity[inds]+0.01), biomassmean = clim$biomassmean[inds], row.names=1:sum(inds))		preds1 <- predict.gam(mods$mygam1, newdata = nd, type='response')		preds2 <- exp(predict(mods$mygam2, newdata = nd, type='response'))		preds <- preds1*preds2*smear		preds[preds<0] <- 0#
		pnm = paste('wtcpue.proj_', i, sep='')		thisproj[[pnm]] = preds		# set biomass projections on land to zero		thisproj[[pnm]][thisproj$depth16th > 0] <- 0	}#
	# summarize by 1/4 degree grid	summproj <- aggregate(thisproj[,grepl('wtcpue.proj', names(thisproj))], by=list(region=thisproj$region, lat=thisproj$lat, lon=thisproj$lon, year=thisproj$year, season=thisproj$season), FUN=mean)#
	save(summproj, file=paste(projfolder, '/summproj_', runtype, '_', projspp[j], '.Rdata', sep='')) # write out the projections (15MB file)}
grep(projspp[1], files, values=TRUE)
grep(projspp[1], files, value=TRUE)
doprojection <- function(projspp, files, clim, projfolder, modfolder, runtype){ 	mod <- avemeanbiomass <- NULL	infile <- grep(projspp, files, value=TRUE)	load(paste(modfolder, '/', infile, sep='')) # loads mod and avemeanbiomass	# modify the GAMs to remove the regionfact term?	# or set all regions within the ocean of this taxon to a region name in the model? (to 'trick' the model)	# this would allow us to project outside the regions for which we had data	# for now, we don't do this	# add mean biomass by region	# use a dummy mean for regions in myocean but outside the model inference	clim$biomassmean <- 0	clim$biomassmean[clim$regionfact %in% names(avemeanbiomass)] <- avemeanbiomass[as.character(clim$regionfact[clim$regionfact %in% names(avemeanbiomass)])] # use region to pull the correct mean biomass values	# smearing estimator for re-transformation bias (see Duan 1983, http://www.herc.research.va.gov/resources/faq_e02.asp)	smear <- mean(exp(mods[['mygam2']]$residuals))	# rows of clim to project to	# NEED TO TRIM TO CORRECT SEASON AS WELL IF MODEL IS SEASONAL	inds <- clim$regionfact %in% names(avemeanbiomass)	# Dataframe for this species' projections	thisproj <- clim[inds,c('regionfact', 'lat', 'lon', 'depth16th', 'year', 'season')] # dataframe to hold projections for this taxon	for(i in 1:13) thisproj[[paste('wtcpue.proj_', i, sep='')]] <- NA 	# Add projected biomass density columns for each climate model#
	# Calculate predictions for 2020-2100 for each model	for(i in 1:11){ # this alone takes a long time		print(paste('model', i))		nd <- data.frame(regionfact = clim$regionfact[inds], surftemp = clim[[paste('surftemp.proj_', i, sep='')]][inds], bottemp = clim[[paste('bottemp.proj_', i, sep='')]][inds], logrugosity = log(clim$rugosity[inds]+0.01), biomassmean = clim$biomassmean[inds], row.names=1:sum(inds))		preds1 <- predict.gam(mods$mygam1, newdata = nd, type='response')		preds2 <- exp(predict(mods$mygam2, newdata = nd, type='response'))		preds <- preds1*preds2*smear		preds[preds<0] <- 0#
		pnm = paste('wtcpue.proj_', i, sep='')		thisproj[[pnm]] = preds		# set biomass projections on land to zero		thisproj[[pnm]][thisproj$depth16th > 0] <- 0	}#
	# summarize by 1/4 degree grid	summproj <- aggregate(thisproj[,grepl('wtcpue.proj', names(thisproj))], by=list(region=thisproj$region, lat=thisproj$lat, lon=thisproj$lon, year=thisproj$year, season=thisproj$season), FUN=mean)#
	save(summproj, file=paste(projfolder, '/summproj_', runtype, '_', projspp, '.Rdata', sep='')) # write out the projections (15MB file)}
mclapply(list(projspp = projspp[1:2]), FUN=doprojection, files=files, clim=clim, projfolder=projfolder, modfolder=modfolder, runtype=runtype, mc.cores=2)
mclapply(X= projspp[1:2], FUN=doprojection, files=files, clim=clim, projfolder=projfolder, modfolder=modfolder, runtype=runtype, mc.cores=2)
ls()
jobs
projfolder
getwd()
doprojection <- function(projspp, files, clim, projfolder, modfolder, runtype){ 	mod <- avemeanbiomass <- NULL	infile <- grep(projspp, files, value=TRUE)	load(paste(modfolder, '/', infile, sep='')) # loads mod and avemeanbiomass	# modify the GAMs to remove the regionfact term?	# or set all regions within the ocean of this taxon to a region name in the model? (to 'trick' the model)	# this would allow us to project outside the regions for which we had data	# for now, we don't do this	# add mean biomass by region	# use a dummy mean for regions in myocean but outside the model inference	clim$biomassmean <- 0	clim$biomassmean[clim$regionfact %in% names(avemeanbiomass)] <- avemeanbiomass[as.character(clim$regionfact[clim$regionfact %in% names(avemeanbiomass)])] # use region to pull the correct mean biomass values	# smearing estimator for re-transformation bias (see Duan 1983, http://www.herc.research.va.gov/resources/faq_e02.asp)	smear <- mean(exp(mods[['mygam2']]$residuals))	# rows of clim to project to	# NEED TO TRIM TO CORRECT SEASON AS WELL IF MODEL IS SEASONAL	inds <- clim$regionfact %in% names(avemeanbiomass)	# Dataframe for this species' projections	thisproj <- clim[inds,c('regionfact', 'lat', 'lon', 'depth16th', 'year', 'season')] # dataframe to hold projections for this taxon	for(i in 1:13) thisproj[[paste('wtcpue.proj_', i, sep='')]] <- NA 	# Add projected biomass density columns for each climate model#
	# Calculate predictions for 2020-2100 for each model#	for(i in 1:11){ # this alone takes a long time#		print(paste('model', i))#		nd <- data.frame(regionfact = clim$regionfact[inds], surftemp = clim[[paste('surftemp.proj_', i, sep='')]][inds], bottemp = clim[[paste('bottemp.proj_', i, sep='')]][inds], logrugosity = log(clim$rugosity[inds]+0.01), biomassmean = clim$biomassmean[inds], row.names=1:sum(inds))#		preds1 <- predict.gam(mods$mygam1, newdata = nd, type='response')#		preds2 <- exp(predict(mods$mygam2, newdata = nd, type='response'))#		preds <- preds1*preds2*smear#		preds[preds<0] <- 0#		#		pnm = paste('wtcpue.proj_', i, sep='')#		thisproj[[pnm]] = preds##		# set biomass projections on land to zero#		thisproj[[pnm]][thisproj$depth16th > 0] <- 0#	}#
	# summarize by 1/4 degree grid	summproj <- aggregate(thisproj[,grepl('wtcpue.proj', names(thisproj))], by=list(region=thisproj$region, lat=thisproj$lat, lon=thisproj$lon, year=thisproj$year, season=thisproj$season), FUN=mean)#
	save(summproj, file=paste(projfolder, '/summproj_', runtype, '_', projspp, '.Rdata', sep='')) # write out the projections (15MB file)}
doprojection <- function(projspp, files, clim, projfolder, modfolder, runtype){ 	mod <- avemeanbiomass <- NULL	infile <- grep(projspp, files, value=TRUE)	load(paste(modfolder, '/', infile, sep='')) # loads mod and avemeanbiomass	# modify the GAMs to remove the regionfact term?	# or set all regions within the ocean of this taxon to a region name in the model? (to 'trick' the model)	# this would allow us to project outside the regions for which we had data	# for now, we don't do this	# add mean biomass by region	# use a dummy mean for regions in myocean but outside the model inference	clim$biomassmean <- 0	clim$biomassmean[clim$regionfact %in% names(avemeanbiomass)] <- avemeanbiomass[as.character(clim$regionfact[clim$regionfact %in% names(avemeanbiomass)])] # use region to pull the correct mean biomass values	# smearing estimator for re-transformation bias (see Duan 1983, http://www.herc.research.va.gov/resources/faq_e02.asp)	smear <- mean(exp(mods[['mygam2']]$residuals))	# rows of clim to project to	# NEED TO TRIM TO CORRECT SEASON AS WELL IF MODEL IS SEASONAL	inds <- clim$regionfact %in% names(avemeanbiomass)	# Dataframe for this species' projections	thisproj <- clim[inds,c('regionfact', 'lat', 'lon', 'depth16th', 'year', 'season')] # dataframe to hold projections for this taxon	for(i in 1:13) thisproj[[paste('wtcpue.proj_', i, sep='')]] <- NA 	# Add projected biomass density columns for each climate model#
	# Calculate predictions for 2020-2100 for each model#	for(i in 1:11){ # this alone takes a long time#		print(paste('model', i))#		nd <- data.frame(regionfact = clim$regionfact[inds], surftemp = clim[[paste('surftemp.proj_', i, sep='')]][inds], bottemp = clim[[paste('bottemp.proj_', i, sep='')]][inds], logrugosity = log(clim$rugosity[inds]+0.01), biomassmean = clim$biomassmean[inds], row.names=1:sum(inds))#		preds1 <- predict.gam(mods$mygam1, newdata = nd, type='response')#		preds2 <- exp(predict(mods$mygam2, newdata = nd, type='response'))#		preds <- preds1*preds2*smear#		preds[preds<0] <- 0#		#		pnm = paste('wtcpue.proj_', i, sep='')#		thisproj[[pnm]] = preds##		# set biomass projections on land to zero#		thisproj[[pnm]][thisproj$depth16th > 0] <- 0#	}#
	# summarize by 1/4 degree grid	summproj <- aggregate(thisproj[,grepl('wtcpue.proj', names(thisproj))], by=list(region=thisproj$region, lat=thisproj$lat, lon=thisproj$lon, year=thisproj$year, season=thisproj$season), FUN=mean)#
	print(summary(summproj))	print(dim(summproj))	#
	save(summproj, file=paste(projfolder, '/summproj_', runtype, '_', projspp, '.Rdata', sep='')) # write out the projections (15MB file)}
doproject(projspp[1], files, clim, projfolder, modfolder, runtype)
doprojection(projspp[1], files, clim, projfolder, modfolder, runtype)
mod <- avemeanbiomass <- NULL
infile <- grep(projspp[1], files, value=TRUE)
infile
load(paste(modfolder, '/', infile, sep='')) # loads mod and avemeanbiomass
clim$biomassmean <- 0	clim$biomassmean[clim$regionfact %in% names(avemeanbiomass)] <- avemeanbiomass[as.character(clim$regionfact[clim$regionfact %in% names(avemeanbiomass)])] # use region to pull the correct mean biomass values
smear <- mean(exp(mods[['mygam2']]$residuals))	# rows of clim to project to	# NEED TO TRIM TO CORRECT SEASON AS WELL IF MODEL IS SEASONAL	inds <- clim$regionfact %in% names(avemeanbiomass)	# Dataframe for this species' projections	thisproj <- clim[inds,c('regionfact', 'lat', 'lon', 'depth16th', 'year', 'season')] # dataframe to hold projections for this taxon	for(i in 1:13) thisproj[[paste('wtcpue.proj_', i, sep='')]] <- NA 	# Add projected biomass density columns for each climate model
summproj <- aggregate(thisproj[,grepl('wtcpue.proj', names(thisproj))], by=list(region=thisproj$region, lat=thisproj$lat, lon=thisproj$lon, year=thisproj$year, season=thisproj$season), FUN=mean)
inds <- which(clim$regionfact %in% names(avemeanbiomass))[1:10]	# Dataframe for this species' projections	thisproj <- clim[inds,c('regionfact', 'lat', 'lon', 'depth16th', 'year', 'season')] # dataframe to hold projections for this taxon	for(i in 1:13) thisproj[[paste('wtcpue.proj_', i, sep='')]] <- NA 	# Add projected biomass density columns for each climate model
summproj <- aggregate(thisproj[,grepl('wtcpue.proj', names(thisproj))], by=list(region=thisproj$region, lat=thisproj$lat, lon=thisproj$lon, year=thisproj$year, season=thisproj$season), FUN=mean)
print(summary(summproj))
print(dim(summproj))
save(summproj, file=paste(projfolder, '/summproj_', runtype, '_', projspp, '.Rdata', sep='')) # write out the projections (15MB file)
save(summproj, file=paste(projfolder, '/summproj_', runtype, '_', projspp[1], '.Rdata', sep='')) # write out the projections (15MB file)
doprojection(projspp[1], files, clim, projfolder, modfolder, runtype)
doprojection <- function(projspp, files, clim, projfolder, modfolder, runtype){ 	mod <- avemeanbiomass <- NULL	infile <- grep(projspp, files, value=TRUE)	load(paste(modfolder, '/', infile, sep='')) # loads mod and avemeanbiomass	# modify the GAMs to remove the regionfact term?	# or set all regions within the ocean of this taxon to a region name in the model? (to 'trick' the model)	# this would allow us to project outside the regions for which we had data	# for now, we don't do this	# add mean biomass by region	# use a dummy mean for regions in myocean but outside the model inference	clim$biomassmean <- 0	clim$biomassmean[clim$regionfact %in% names(avemeanbiomass)] <- avemeanbiomass[as.character(clim$regionfact[clim$regionfact %in% names(avemeanbiomass)])] # use region to pull the correct mean biomass values	# smearing estimator for re-transformation bias (see Duan 1983, http://www.herc.research.va.gov/resources/faq_e02.asp)	smear <- mean(exp(mods[['mygam2']]$residuals))	# rows of clim to project to	# NEED TO TRIM TO CORRECT SEASON AS WELL IF MODEL IS SEASONAL#	inds <- clim$regionfact %in% names(avemeanbiomass)	inds <- which(clim$regionfact %in% names(avemeanbiomass))[1:10]	# Dataframe for this species' projections	thisproj <- clim[inds,c('regionfact', 'lat', 'lon', 'depth16th', 'year', 'season')] # dataframe to hold projections for this taxon	for(i in 1:13) thisproj[[paste('wtcpue.proj_', i, sep='')]] <- NA 	# Add projected biomass density columns for each climate model#
	# Calculate predictions for 2020-2100 for each model#	for(i in 1:11){ # this alone takes a long time#		print(paste('model', i))#		nd <- data.frame(regionfact = clim$regionfact[inds], surftemp = clim[[paste('surftemp.proj_', i, sep='')]][inds], bottemp = clim[[paste('bottemp.proj_', i, sep='')]][inds], logrugosity = log(clim$rugosity[inds]+0.01), biomassmean = clim$biomassmean[inds], row.names=1:sum(inds))#		preds1 <- predict.gam(mods$mygam1, newdata = nd, type='response')#		preds2 <- exp(predict(mods$mygam2, newdata = nd, type='response'))#		preds <- preds1*preds2*smear#		preds[preds<0] <- 0#		#		pnm = paste('wtcpue.proj_', i, sep='')#		thisproj[[pnm]] = preds##		# set biomass projections on land to zero#		thisproj[[pnm]][thisproj$depth16th > 0] <- 0#	}#
	# summarize by 1/4 degree grid	summproj <- aggregate(thisproj[,grepl('wtcpue.proj', names(thisproj))], by=list(region=thisproj$region, lat=thisproj$lat, lon=thisproj$lon, year=thisproj$year, season=thisproj$season), FUN=mean)#
	print(summary(summproj))	print(dim(summproj))	#
	save(summproj, file=paste(projfolder, '/summproj_', runtype, '_', projspp, '.Rdata', sep='')) # write out the projections (15MB file)}
doprojection(projspp[1], files, clim, projfolder, modfolder, runtype)
doprojection(projspp[2], files, clim, projfolder, modfolder, runtype)
numcorestouse <- 2
mclapply(X= projspp[1:2], FUN=doprojection, files=files, clim=clim, projfolder=projfolder, modfolder=modfolder, runtype=runtype, mc.cores=numcorestouse)
