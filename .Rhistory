head(dat)
length(unique(dat$spp))
length(unique(paste(dat$region, dat$spp))
)
x <- c(5,7,5,7,4,3,2,8,9,10,9,8,7,6,5,4,3)#
y <- c(1,1,2,2,3,3,3,3,3,3, 4,5,6,7,6,5,4)#
y2 <- c(3,3,3,4,4,4,4,4,5,5,5,6)#
x2 <- c(5,6,7,4,5,6,7,8,5,6,7,6)#
x3 <-6#
y3 <-8#
par(mfrow=c(1,1))#
plot (x,y, pch=8, col="green", xlab="", ylab="", main="",#
yaxt="n", xaxt="n", xlim=c(1,11), ylim=c(2,9))#
par(new=TRUE)#
plot(x2,y2, pch=16, col="red", xlab="", ylab="",#
main="", xlim=c(1,11), ylim=c(2,9),#
yaxt="n", xaxt="n")#
par(new=TRUE)#
plot(x3,y3, pch=11, col="gold", xlab="", ylab="",#
main="Merry Christmas!", xlim=c(1,11), ylim=c(2,9),#
yaxt="n", xaxt="n")
1/.026
1/.26
1/.0468
1/.468
170/41
170/4.1
12/.6
dat = read.csv('~/Documents/Rutgers/CINAR Climate indicators/output/natcentbio_2014-10-10.csv')
length(unique(dat$spp))
head(dat)
dat = read.csv('~/Documents/Rutgers/CINAR Climate indicators/output/centbio_2014-10-10.csv')
head(dat)
length(unique(dat$spp))
sort(unique(dat$region))
filler = aggregate(list(delta = full$delta[availinds2][usefull]), by = list(season = full$season[availinds2][usefull], year = full$year[availinds2][usefull]), FUN=mean, na.rm=TRUE) # summarize full deltas by year (average across cells available in each year)
source('~/Documents/Rutgers/Philippines/2014/Surveys/trim_GPX_2014-12-27.r', chdir = TRUE)
?sample
sample(c(0,1), size=100, replace=TRUE)
n = 5allocs = matrix(NA, nrow=40, ncol=5)for(i in 1:40){	locs = sort(floor(runif(n, 0,25)))	while(any(diff(locs) == 0)){		locs = sort(floor(runif(n, 0,25)))	}	allocs[i,] = locs}
allocs
n = 5allocs = matrix(NA, nrow=12, ncol=5)for(i in 1:12){	locs = sort(floor(runif(n, 0,25)))	while(any(diff(locs) == 0)){		locs = sort(floor(runif(n, 0,25)))	}	allocs[i,] = locs}allocs
x = 1:1000
y = 1/(1+x)
plot(x,y, type='l')
y = 1/(1+x)*x
plot(x,y, type='l')
y = 1/(1+x)
y[1000]/y[1]
y[1]/y[1000]
y = 1/(1+10*x)
y[1]/y[1000]
y = 1/(1+0.01*x)
y[1]/y[1000]
y = 1/(1+0.005*x)
y[1]/y[1000]
y = 1/(1+0.001*x)
y[1]/y[1000]
y = 1/(1+0.002*x)
y[1]/y[1000]
y = 1/(1+0.003*x)
y[1]/y[1000]
0.0005*500000
0.0005*100000
0.003/249
249/0.003
1/0.35
73/1000
a=1:100
r = 1/(1+a/50)
plot(a,r)
r = 1/(1+a/10)
plot(a,r)
1/0.35
install.packages(/Users/mpinsky/Documents/Stanford/Kimbe Bay/Data/Samples/Analysis Genetic/Rmigraine_0.4.tar.gz, type='source', repos=NULL)
install.packages(''/Users/mpinsky/Documents/Stanford/Kimbe Bay/Data/Samples/Analysis Genetic/Rmigraine_0.4.tar.gz', type='source', repos=NULL)
install.packages('/Users/mpinsky/Documents/Stanford/Kimbe Bay/Data/Samples/Analysis Genetic/Rmigraine_0.4.tar.gz', type='source', repos=NULL)
fst = c(0.02141174,0.00752789,0.01364,0.00749862,0.0140749,0.00139429,0.00555897,0.0177885,0.00897316,0.01374676,0.00352074,0.01627896,0.01705109,0.01064459,0.01988448)
fst
fis = c(-0.004313846,-0.015083429,0.033442718,-0.011308127,-0.010610362,0.00307952,0.012732322,0.063620421,0.037598624,0.021261744,0.016577792,0.095588147,0.020169793,0.058187864,0.042714013)
fis
plot(fst, fis)
abline(v=0)
plot(fst, fis)
summary(lm(fis ~ fst))
runif(30, 0, 100)
reefs = runif(30, 0, 100)
l = rnorm(10000, sd=10)
summary(l)
l = rnorm(10000, mean=50, sd=10)
summary(l)
sd(l)
keep = rep(FALSE, length(l)); for(i in 1:length(reefs)) keep = keep | (abs(l-reefs[i]) < 1)
sum(keep)
hist(l)
hist(l[keep])
hist(l, breaks=100)
hist(l[keep], breaks=100)
abline(v=reefs)
abline(v=reefs, col='red')
sd(l[keep])
reefs2 = runif(10,0,100)
keep2 = rep(FALSE, length(l)); for(i in 1:length(reefs2)) keep2 = keep2 | (abs(l-reefs2[i]) < 1)
hist(l[keep2])
abline(v=reefs2, col='red')
hist(l[keep2], breaks=100)
abline(v=reefs2, col='red')
sd(l[keep2])
sds = rep(NA, 100)
l = rnorm(10000, mean=50, sd=10)
for(i in 1:length(sds)){	reefs = runif(10, 0, 100)	keep = rep(FALSE, length(l)); for(j in 1:length(reefs)) keep = keep | (abs(l-reefs[j]) < 1)	sds[i] = sd(l[keep])}
summary(sds)
hist(sds)
sds = rep(NA, 100)reefs = runif(10, 0, 100)
for(i in 1:length(sds)){	l = rnorm(1000, mean=50, sd=10)	keep = rep(FALSE, length(l)); for(j in 1:length(reefs)) keep = keep | (abs(l-reefs[j]) < 1)	sds[i] = sd(l[keep])}summary(sds)
hist(sds)
sds = rep(NA, 1000)reefs = runif(10, 0, 100)for(i in 1:length(sds)){	l = rnorm(1000, mean=50, sd=10)	keep = rep(FALSE, length(l)); for(j in 1:length(reefs)) keep = keep | (abs(l-reefs[j]) < 1)	sds[i] = sd(l[keep])}summary(sds)hist(sds)
for(i in 1:length(sds)){	l = rnorm(1000, mean=50, sd=10)	keep = rep(FALSE, length(l)); for(j in 1:length(reefs)) keep = keep | (abs(l-reefs[j]) < 1)	sds[i] = sd(l[keep])}summary(sds)hist(sds)
7000/5/2
sqrt(700)
sqrt(600)
sqrt(850)
1126/120
sqrt(c(6000, 7000, 8500)/2/9)
sqrt(c(6000, 7000, 8500)/2/5)
library(RColorBrewer)mq = c(1,1) # manmade capital quantitymp = c(1, 0.8) # pricehq = c(1,1) # human capital quantityhp = c(1, 0.4)nq = c(1,0.6) # natural capital quantitynp = c(1, 1.25)quartz(width=7,height=4)par(mfrow=c(1,2))
cols = brewer.pal(6, 'Paired')
t = c(0,1)
par(mfrow=c(1,2))
plot(t, mq, col=cols[1], type='o')
par(mfrow=c(1,2))plot(t, mq, col=cols[1], type='o', ylim=ylims)
ylims = c(0,1.1)
par(mfrow=c(1,2))plot(t, mq, col=cols[1], type='o', ylim=ylims)
par(mfrow=c(1,2))plot(t, mq, col=cols[1], type='o', ylim=ylims, pch=16)
lines(t,hq, col=cols[2], type='o', pch=16)
mq
hq
mq = c(1.05,1.05) # manmade capital quantitymp = c(1, 0.8) # pricehq = c(1,1) # human capital quantityhp = c(1, 0.4)nq = c(0.95,0.6) # natural capital quantitynp = c(1, 1.25)t = c(0,1)
par(mfrow=c(1,2))plot(t, mq, col=cols[1], type='o', ylim=ylims, pch=16)lines(t,hq, col=cols[2], type='o', pch=16)
lines(t,nq, col=cols[3], type='o', pch=16)
par(mfrow=c(1,2), las=2)plot(t, mq, col=cols[1], type='o', ylim=ylims, pch=16)lines(t,hq, col=cols[2], type='o', pch=16)lines(t,nq, col=cols[3], type='o', pch=16)
par(mfrow=c(1,2), las=2)plot(t, mq, col=cols[1], type='o', ylim=ylims, pch=16)lines(t,hq, col=cols[3], type='o', pch=16)lines(t,nq, col=cols[5], type='o', pch=16)
plot(t, mp, col=cols[2], type='o', ylim=ylims, pch=16)lines(t,hp, col=cols[4], type='o', pch=16)lines(t,np, col=cols[6], type='o', pch=16)
ylims = c(0,1.3)
par(mfrow=c(1,2), las=2)plot(t, mq, col=cols[1], type='o', ylim=ylims, pch=16)lines(t,hq, col=cols[3], type='o', pch=16)lines(t,nq, col=cols[5], type='o', pch=16)plot(t, mp, col=cols[2], type='o', ylim=ylims, pch=16)lines(t,hp, col=cols[4], type='o', pch=16)lines(t,np, col=cols[6], type='o', pch=16)
par(mfrow=c(1,3), las=2)plot(t, mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Quantity')lines(t,hq, col=cols[3], type='o', pch=16)lines(t,nq, col=cols[5], type='o', pch=16)plot(t, mp, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Price')lines(t,hp, col=cols[3], type='o', pch=16)lines(t,np, col=cols[5], type='o', pch=16)plot(t, mp*mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Value')lines(t,hp*hq, col=cols[3], type='o', pch=16)lines(t,np*nq, col=cols[5], type='o', pch=16)
quartz(width=9,height=4)par(mfrow=c(1,3), las=2)plot(t, mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Quantity')lines(t,hq, col=cols[3], type='o', pch=16)lines(t,nq, col=cols[5], type='o', pch=16)plot(t, mp, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Price')lines(t,hp, col=cols[3], type='o', pch=16)lines(t,np, col=cols[5], type='o', pch=16)plot(t, mp*mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Value')lines(t,hp*hq, col=cols[3], type='o', pch=16)lines(t,np*nq, col=cols[5], type='o', pch=16)
quartz(width=6,height=3)par(mfrow=c(1,3), las=2)plot(t, mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Quantity')lines(t,hq, col=cols[3], type='o', pch=16)lines(t,nq, col=cols[5], type='o', pch=16)plot(t, mp, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Price')lines(t,hp, col=cols[3], type='o', pch=16)lines(t,np, col=cols[5], type='o', pch=16)plot(t, mp*mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Value')lines(t,hp*hq, col=cols[3], type='o', pch=16)lines(t,np*nq, col=cols[5], type='o', pch=16)
?par
par(mfrow=c(1,3), las=1, mai=c(0.5)plot(t, mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Quantity')lines(t,hq, col=cols[3], type='o', pch=16)lines(t,nq, col=cols[5], type='o', pch=16)plot(t, mp, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Price')lines(t,hp, col=cols[3], type='o', pch=16)lines(t,np, col=cols[5], type='o', pch=16)plot(t, mp*mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Value')lines(t,hp*hq, col=cols[3], type='o', pch=16)lines(t,np*nq, col=cols[5], type='o', pch=16)
quartz(width=6,height=3)par(mfrow=c(1,3), las=1, mai=c(0.5)plot(t, mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Quantity')lines(t,hq, col=cols[3], type='o', pch=16)lines(t,nq, col=cols[5], type='o', pch=16)plot(t, mp, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Price')lines(t,hp, col=cols[3], type='o', pch=16)lines(t,np, col=cols[5], type='o', pch=16)plot(t, mp*mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Value')lines(t,hp*hq, col=cols[3], type='o', pch=16)lines(t,np*nq, col=cols[5], type='o', pch=16)
quartz(width=6,height=3)par(mfrow=c(1,3), las=1, mai=c(0.5, 0.5, 0.2, 0.1))plot(t, mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Quantity')lines(t,hq, col=cols[3], type='o', pch=16)lines(t,nq, col=cols[5], type='o', pch=16)plot(t, mp, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Price')lines(t,hp, col=cols[3], type='o', pch=16)lines(t,np, col=cols[5], type='o', pch=16)plot(t, mp*mq, col=cols[1], type='o', ylim=ylims, pch=16, ylab='Value')lines(t,hp*hq, col=cols[3], type='o', pch=16)lines(t,np*nq, col=cols[5], type='o', pch=16)
x=rpois(1000, 10)
hist(x)
hist(x, breaks=c(0,30,by=1))
hist(x, breaks=seq(0,30,by=1))
hist(x, breaks=seq(-0.5,30,by=1))
hist(rpois(10000,10), breaks=seq(-0.5,30,by=1), col='grey')
hist(rpois(10000,5), breaks=seq(-0.5,30,by=1), col='grey')
hist(rpois(10000,3), breaks=seq(-0.5,30,by=1), col='grey')
hist(rpois(10000,4), breaks=seq(-0.5,30,by=1), col='grey')
hist(rpois(10000,5), breaks=seq(-0.5,30,by=1), col='grey')
x = rpois(100, 0.25)/100
hist(x, col='grey')
?rpois
x= rgeom(100,0.25)/100
hist(x, col='grey')
x[1:10]
x = rbinom(1000, 100, 0.25)
x[1:10]
x = rbinom(1000, 100, 0.25)/100
x[1:10]
hist(x, col='grey')
abline(v=0.33)
sum(x>=0.33)/length(x)
x = rbinom(1000, 50, 0.25)/100
hist(x, col='grey')
abline(v=0.33)
x = rbinom(10000, 50, 0.25)/50
hist(x, col='grey')
abline(v=0.33)
sum(x>=0.33)/length(x)
x = rbinom(1000000, 100, 0.25)/100
hist(x, col='grey')
sum(x>=0.33)/length(x)
x = rbinom(1000000, 50, 0.25)/50
sum(x>=0.33)/length(x)
Correlations among variables?
la = 1:100
fa = 4.7559*la^2.6399
plot(la, fa)
setwd('/Users/mpinsky/Documents/Rutgers/Range projections/')
clim = read.csv('Output/climGrid_2015-02-02.csv')
setwd('/Users/mpinsky/Documents/Rutgers/Range projections/proj_ranges')
setwd('~/Documents/Rutgers/Range projections/proj_ranges')
clim = read.csv('Output/climGrid_2015-02-02.csv')
outlatlons2 = clim[!duplicated(clim[,c('lat', 'lon')]),c('lat', 'lon', 'depth')]
outlatlons2 = outlatlons2[order(outlatlons2$lat, outlatlons2$lon),]
dim(outlatlons2)
head(outlatlons2)
a = numeric(nrow(outlatlons2)*9)
outlatlons3 = data.frame(lat=a, lon=a, depth=a)
i=1
((i-1)*9+1)
(i*9)
i=2
((i-1)*9+1)
(i*9)
sort(unique(outlatlons2$lat))
i=1
outlatlons2$lat[i]
outlatlons2$lat[i] + c(-0.09375, -0.03125, 0.03125, 0.09375)
rep(c(-0.0625, 0.0625),2)
rep(c(-0.0625, 0.0625),c(2,2))
i=1
outlatlons3$lat[((i-1)*4+1):(i*4)]
outlatlons3$lon[((i-1)*4+1):(i*4)]
a = numeric(nrow(outlatlons2)*4)	outlatlons3 = data.frame(lat=a, lon=a, depth=a)
outlatlons2$lat[i]
outlatlons2$lon[i]
outlatlons2$lat[i] + rep(c(-0.0625, 0.0625),2)
outlatlons2$lon[i] + rep(c(-0.0625, 0.0625),c(2,2))
outlatlons3$lat[((i-1)*4+1):(i*4)] = outlatlons2$lat[i] + rep(c(-0.0625, 0.0625),2)		outlatlons3$lon[((i-1)*4+1):(i*4)] = outlatlons2$lon[i] + rep(c(-0.0625, 0.0625),c(2,2))
plot(outlatlons3$lon[((i-1)*4+1):(i*4)], outlatlons3$lat[((i-1)*4+1):(i*4)])
points(outlatlons2$lon[i], outlatlons2$lat[i], pch=16)
a = numeric(nrow(outlatlons2)*4)	outlatlons3 = data.frame(lat=a, lon=a, depth=a)	for(i in 1:nrow(outlatlons2)){		outlatlons3$lat[((i-1)*4+1):(i*4)] = outlatlons2$lat[i] + rep(c(-0.0625, 0.0625),2)		outlatlons3$lon[((i-1)*4+1):(i*4)] = outlatlons2$lon[i] + rep(c(-0.0625, 0.0625),c(2,2))	}
write.csv(outlatlons3, file=paste('Output/projectiongrid_latlons1.8th_forLauren_', Sys.Date(), '.csv', sep=''), row.names=FALSE)
a = numeric(nrow(outlatlons3)*4)	outlatlons4 = data.frame(lat=a, lon=a, depth=a)
dim(outlatlons4)
sort(unique(outlatlons3$lat %% 1))
a = numeric(nrow(outlatlons3)*4)	outlatlons4 = data.frame(lat=a, lon=a, depth=a)	for(i in 1:nrow(outlatlons3)){		outlatlons4$lat[((i-1)*4+1):(i*4)] = outlatlons3$lat[i] + rep(c(-0.03125, 0.03125),2)		outlatlons4$lon[((i-1)*4+1):(i*4)] = outlatlons3$lon[i] + rep(c(-0.03125, 0.03125),c(2,2))	}
nrow(outlatlons3)
a = numeric(nrow(outlatlons3)*4)	outlatlons4 = data.frame(lat=a, lon=a, depth=a)	nrow(outlatlons3)	for(i in 1:nrow(outlatlons3)){ # takes a few minutes		if(i %% 1000 == 0) print(i)		outlatlons4$lat[((i-1)*4+1):(i*4)] = outlatlons3$lat[i] + rep(c(-0.03125, 0.03125),2)		outlatlons4$lon[((i-1)*4+1):(i*4)] = outlatlons3$lon[i] + rep(c(-0.03125, 0.03125),c(2,2))	}
write.csv(outlatlons4, file=paste('Output/projectiongrid_latlons1.16th_forLauren_', Sys.Date(), '.csv', sep=''), row.names=FALSE)
load('data/trawl_allregionsforprojections_2015-02-02.RData') # load dat data.frame. Has all trawl observations from all regions. wtcpue has the standardized biomass estimates. They are standardized within regions, but not across regions.source("CSquareCode.r") #taken from VMStools in googlecode
getwd()
Spptax<-read.csv("data/spptaxonomy_2015-02-09_plusManual.csv") #note: new column in CSV file spptax<-apply(Spptax,2,tolower)
head(dat)
head(spptax)
head(Spptax)
dat$sppl<-tolower(dat$spp)datspp<-unique(dat$sppl)
datspp
spptax<-as.data.frame(spptax)
head(spptax)
sum(datspp %in% spptax[,1])# 792 of 4937 spp matched
sum(datspp %in% spptax$newname)# 792 of 4937 spp matched
spptax[spptax$name != spptax$newname,]
spptax[as.character(spptax$name) != as.character(spptax$newname),]
spptax[as.character(spptax$name) != as.character(spptax$newname),c('name', 'newname')]
spptax[as.character(spptax$name) != as.character(spptax$newname),c('taxon', 'name', 'genusspecies', 'newname')]
sum(datspp %in% spptax$taxon)# 792 of 4937 spp matched
names(spptax)
head(spptax)
matches<-datspp %in% spptax$taxon + datspp %in% spptax$name + datspp %in% spptax$common + datspp %in% spptax$genusspecies  #826 matches/4937
head(matches)
max(matches)
newnames=NULL
i=1
newnames=character(length(datspp))
length(newnames)
i
matches[i]
if(i == 1) print('hi')else if(i == 1){	print('hi again')}else if(if == 1){	print('bye')}
if(i == 1) print('hi')else if(i == 1){	print('hi again')}
i
if (matches[i]==0) newnames[i]<-datspp[i]	else if(datspp[i] %in% spptax[,1]) 	{		ind<-match(datspp[i],spptax[,1])		newnames[i]<-as.character(spptax[ind,14])	} 	else if(datspp[i] %in% spptax[,11]) 	{	ind<-match(datspp[i],spptax[,11])	newnames[i]<-as.character(spptax[ind,14])	}	else if(datspp[i] %in% spptax[,13]) 	{	ind<-match(datspp[i],spptax[,13])	newnames[i]<-as.character(spptax[ind,14])	}	else if(datspp[i] %in% spptax[,12]) 	{	ind<-match(datspp[i],spptax[,12])	newnames[i]<-as.character(spptax[ind,14])	}
